{"version":3,"sources":["../../app/api/cypher.js"],"names":[],"mappings":";;AAAC,OAAO,OAAP,GAAiB,UAAS,MAAT,EAAgB;;AAE9B,iBAF8B;;AAKlC,QAAI,QAAQ,OAAO,KAAP,CAAa,IAAb,GAAoB,6BAApB,CALsB;;AAOlC,aAAS,MAAT,CAAgB,UAAhB,EAA2B,SAA3B,EAAsC;AAClC,YAAI,IAAI,QAAQ,iBAAR,CAAJ,CAD8B;;AAGlC,eAAO,EAAE,IAAF,CAAO;AACV,iBAAK,KAAL;AACA,oBAAQ,MAAR;AACA,kBAAM,EAAE,YAAY,UAAZ,EAAR;AACA,qBAAS;AACL,iCAAiB,OAAO,KAAP,CAAa,QAAb;aADrB;;AAIA,uBAAU,SAAV;SARG,CAAP,CAHkC;KAAtC;;;;;;;;;;;;;;;;;;;;;;;;;;AAPkC,aA+CzB,QAAT,CAAkB,GAAlB,EAAuB,CAAvB,EAA0B;;AAEtB,YAAI,MAAM,iBAAN,EAAyB;AACzB,kBAAM,iBAAN,CAAwB,IAAxB,EAA8B,QAA9B,EADyB;SAA7B,MAEO;AACH,iBAAK,KAAL,GAAa,IAAK,KAAJ,EAAD,CAAc,KAAd,IAAuB,EAAvB,CADV;SAFP;;AAMA,aAAK,KAAL,GAAa,IAAI,IAAJ,CARS;AAStB,aAAK,OAAL,GAAe,IAAI,OAAJ,CATO;AAUtB,aAAK,KAAL,GAAa,CAAb;;AAVsB,KAA1B;;;;;;AA/CkC,YAiElC,CAAS,SAAT,GAAqB,OAAO,MAAP,CAAc,MAAM,SAAN,CAAnC,CAjEkC;AAkElC,aAAS,SAAT,CAAmB,WAAnB,GAAiC,QAAjC,CAlEkC;;AAoElC,aAAS,OAAT,CAAiB,GAAjB,EAAsB;AAClB,aAAK,IAAI,IAAJ,IAAY,GAAjB,EAAsB;AAClB,gBAAI,IAAI,cAAJ,CAAmB,IAAnB,CAAJ,EACI,OAAO,KAAP,CADJ;SADJ;AAIA,eAAO,IAAP,CALkB;KAAtB;;AAQA,QAAI,OAAO;;AAEP,wBAAgB,wBAAU,CAAV,EAAa,IAAb,EAAmB,MAAnB,EAA2B,YAA3B,EAAyC;;;;;;;;;AAUrD,gBAAI,MAAM,EAAE,aAAa,CAAb,EAAgB,gBAAgB,eAAe,IAAf,GAAsB,KAAtB,EAAxC,CAViD;AAWrD,gBAAI,UAAU,CAAC,QAAQ,MAAR,CAAD,EAAkB;AAC5B,oBAAI,UAAJ,GAAiB,MAAjB,CAD4B;aAAhC;;AAIA,gBAAI,IAAJ,EAAU;AACN,oBAAI,kBAAJ,GAAyB,CAAC,IAAD,CAAzB,CADM;aAAV;;AAIA,mBAAO,GAAP,CAnBqD;SAAzC;AAsBhB,2BAAmB,2BAAU,UAAV,EAAsB;;;AAGrC,yBAAa,WAAW,GAAX,CAAe,UAAS,CAAT,EAAW;AACnC,oBAAI,CAAC,EAAE,SAAF,EACL;AAAC,wBAAI,KAAK,cAAL,CAAoB,CAApB,CAAJ,CAAD;iBADA;AAEA,uBAAO,CAAP,CAHmC;aAAX,CAA5B,CAHqC;;AASrC,mBAAO,OAAO,UAAP,EAAmB,IAAnB,CAAwB,UAAU,CAAV,EAAa;AACxC,oBAAI,EAAE,MAAF,CAAS,MAAT,EAAiB;AACjB,0BAAO,IAAI,QAAJ,CAAa,EAAE,MAAF,CAAS,CAAT,CAAb,EAA0B,UAA1B,CAAP,CADiB;iBAArB,MAGK;AACD,2BAAO,EAAE,OAAF,CADN;iBAHL;aAD2B,CAA/B,CATqC;SAAtB;AAoBjB,sBAAc,sBAAU,CAAV,EAAa,IAAb,EAAmB,MAAnB,EAA2B;;;AAEvC,gBAAI,aAAa,CAAC,KAAK,cAAL,CAAoB,CAApB,EAAuB,IAAvB,EAA6B,MAA7B,CAAD,CAAb,CAFmC;;AAIvC,mBAAO,OAAO,UAAP,EAAmB,IAAnB,CAAwB,UAAU,CAAV,EAAa;AACxC,oBAAI,EAAE,MAAF,CAAS,MAAT,EAAiB;AACjB,0BAAO,IAAI,QAAJ,CAAa,EAAE,MAAF,CAAS,CAAT,CAAb,EAA0B,UAA1B,CAAP,CADiB;iBAArB,MAGK,IAAI,EAAE,OAAF,CAAU,MAAV,EAAkB;AACvB,2BAAO,EAAE,OAAF,CAAU,CAAV,EAAa,IAAb,CADgB;iBAAtB,MAGA;AACD,2BAAO,IAAP,CADC;iBAHA;aAJsB,CAA/B,CAJuC;SAA3B;;;;;;;;;;AA5CT,KAAP,CA5E8B;;AAoJlC,WAAO,IAAP,CApJkC;CAAhB","file":"cypher.js","sourcesContent":["ï»¿module.exports = function(config){\r\n    \r\n    \"use strict\";\r\n    \r\n    \r\nvar txUrl = config.neo4j.root + \"/db/data/transaction/commit\";\r\n  \r\nfunction cypher(statements,transform) {\r\n    var r = require(\"request-promise\");\r\n    \r\n    return r.post({\r\n        uri: txUrl,\r\n        method: \"POST\",\r\n        json: { statements: statements },//[{ statement: query, parameters: params }] \r\n        headers: {\r\n            'Authorization': config.neo4j.password\r\n        }\r\n        ,\r\n        transform:transform\r\n    });\r\n}\r\n\r\n/*\r\nfunction cypher2(statements, cb) {\r\n    var r = require(\"request\");\r\n    r.post({\r\n        uri: txUrl,\r\n        json: { statements: statements },//[{ statement: query, parameters: params }] \r\n        headers: {\r\n            'Authorization': config.neo4j.password\r\n        }\r\n    },\r\n\r\n         function (err, res) {\r\n        \r\n        if (res) {\r\n            cb(err, res.body);\r\n        }\r\n        else {\r\n            cb(err);\r\n        }\r\n    });\r\n\r\n}\r\n*/\r\n\r\n\r\nfunction NeoError(err, q) {\r\n    // See https://code.google.com/p/v8/wiki/JavaScriptStackTraceApi    \r\n    if (Error.captureStackTrace) {\r\n        Error.captureStackTrace(this, NeoError);\r\n    } else {\r\n        this.stack = (new Error()).stack || '';\r\n    }\r\n    \r\n    this.error = err.code;\r\n    this.message = err.message;\r\n    this.query = q;\r\n        // this.detail = err;\r\n}\r\n\r\n//var T = function () { };\r\n//T.prototype = Error.prototype;\r\n//NeoError.prototype = new T;\r\n\r\nNeoError.prototype = Object.create(Error.prototype);\r\nNeoError.prototype.constructor = NeoError;\r\n\r\nfunction isEmpty(obj) {\r\n    for (var prop in obj) {\r\n        if (obj.hasOwnProperty(prop))\r\n            return false;\r\n    }\r\n    return true;\r\n}\r\n\r\nvar that = {\r\n    \r\n    buildStatement: function (q, type, params, includeStats) {\r\n        \r\n   \r\n        //for (var key in params) {\r\n        //    if (!params[key] || isEmpty(params[key])) {\r\n        //        delete params[key];\r\n        //        q = q.replace(\"{\" + key + \"}\", \"\");\r\n        //    }\r\n        //}\r\n        \r\n        var out = { \"statement\": q, \"includeStats\": includeStats ? true : false };\r\n        if (params && !isEmpty(params)) {\r\n            out.parameters = params;\r\n        }\r\n        \r\n        if (type) {\r\n            out.resultDataContents = [type];\r\n        }\r\n        \r\n        return out;\r\n\r\n    },\r\n    executeStatements: function (statements) {\r\n        \r\n        //check that each statement is a statement and not just a query\r\n        statements = statements.map(function(s){\r\n            if (!s.statement)\r\n            {s = that.buildStatement(s);}\r\n            return s;\r\n        });\r\n        \r\n        return cypher(statements).then(function (d) {\r\n            if (d.errors.length) {\r\n                throw (new NeoError(d.errors[0], statements));\r\n            }\r\n            else {\r\n                return d.results;\r\n            }\r\n        });\r\n\r\n\r\n    }\r\n    , executeQuery: function (q, type, params) { //type = graph or row\r\n        \r\n        var statements = [that.buildStatement(q, type, params)];\r\n        \r\n        return cypher(statements).then(function (d) {\r\n            if (d.errors.length) {\r\n                throw (new NeoError(d.errors[0], statements));\r\n            }\r\n            else if (d.results.length) {\r\n                return d.results[0].data;\r\n            }\r\n            else {\r\n                return null;\r\n            }\r\n        });\r\n    }\r\n\r\n    /*\r\n    , executeQuery2: function (q, type, params,cb) { //type = graph or row\r\n        \r\n        var statements = [that.buildStatement(q, type, params)];\r\n        \r\n        return cypher2(statements,cb);\r\n    }*/\r\n\r\n\r\n};\r\n\r\nreturn that;\r\n\r\n\r\n    \r\n    \r\n};\r\n  "]}