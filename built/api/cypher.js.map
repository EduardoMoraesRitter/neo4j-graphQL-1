{"version":3,"sources":["../../src/api/cypher.js"],"names":[],"mappings":";;;;;;AAAC;;;;AACD;;;;AACA;;;;;;AAEA,MAAM,QAAQ,cAAO,KAAP,CAAa,IAAb,GAAoB,6BAApB;;AAEd,MAAM,SAAS,CAAC,UAAD,EAAa,SAAb,KAA2B;AACxC,SAAO,yBAAE,IAAF,CAAO;AACZ,SAAK,KAAL;AACA,YAAQ,MAAR;AACA,UAAM,EAAE,YAAY,UAAZ,EAAR;AACA,aAAS;AACP,uBAAiB,cAAO,KAAP,CAAa,QAAb;KADnB;AAGA,eAAU,SAAV;GAPK,CAAP,CADwC;CAA3B;;AAYf,MAAM,UAAU,OAAS;AACvB,OAAK,IAAI,IAAJ,IAAY,GAAjB,EAAsB;AACpB,QAAI,IAAI,cAAJ,CAAmB,IAAnB,CAAJ,EACE,OAAO,KAAP,CADF;GADF;AAIA,SAAO,IAAP,CALuB;CAAT;;AAQhB,MAAM,MAAM;AACV,kBAAgB,CAAC,CAAD,EAAI,IAAJ,EAAU,MAAV,EAAkB,YAAlB,KAAmC;AACjD,QAAI,MAAM,EAAE,aAAa,CAAb,EAAgB,gBAAgB,eAAe,IAAf,GAAsB,KAAtB,EAAxC,CAD6C;AAEjD,QAAI,UAAU,CAAC,QAAQ,MAAR,CAAD,EAAkB;AAC9B,UAAI,UAAJ,GAAiB,MAAjB,CAD8B;KAAhC;AAGA,QAAI,IAAJ,EAAU;AACR,UAAI,kBAAJ,GAAyB,CAAC,IAAD,CAAzB,CADQ;KAAV;AAGA,WAAO,GAAP,CARiD;GAAnC;AAUhB,qBAAmB,cAAgB;;AAEjC,iBAAa,WAAW,GAAX,CAAe,KAAK;AAC/B,UAAI,CAAC,EAAE,SAAF,EAAa;AAAE,YAAI,IAAI,cAAJ,CAAmB,CAAnB,CAAJ,CAAF;OAAlB;AACA,aAAO,CAAP,CAF+B;KAAL,CAA5B,CAFiC;;AAOjC,WAAO,OAAO,UAAP,EAAmB,IAAnB,CAAwB,KAAK;AAClC,UAAI,EAAE,MAAF,CAAS,MAAT,EAAiB;AACnB,cAAO,uBAAa,EAAE,MAAF,CAAS,CAAT,CAAb,EAA0B,UAA1B,CAAP,CADmB;OAArB,MAEO;AACL,eAAO,EAAE,OAAF,CADF;OAFP;KAD6B,CAA/B,CAPiC;GAAhB;;;AAiBnB,gBAAc,CAAC,CAAD,EAAI,IAAJ,EAAU,MAAV,KAAqB;;AAEjC,UAAM,aAAa,CAAC,IAAI,cAAJ,CAAmB,CAAnB,EAAsB,IAAtB,EAA4B,MAA5B,CAAD,CAAb,CAF2B;;AAIjC,WAAO,OAAO,UAAP,EAAmB,IAAnB,CAAwB,KAAK;AAClC,UAAI,EAAE,MAAF,CAAS,MAAT,EAAiB;AACnB,cAAO,uBAAa,EAAE,MAAF,CAAS,CAAT,CAAb,EAA0B,UAA1B,CAAP,CADmB;OAArB,MAEO,IAAI,EAAE,OAAF,CAAU,MAAV,EAAkB;AAC3B,eAAO,EAAE,OAAF,CAAU,CAAV,EAAa,IAAb,CADoB;OAAtB,MAEA;AACL,eAAO,IAAP,CADK;OAFA;KAHsB,CAA/B,CAJiC;GAArB;CA5BV;;kBA4CS","file":"cypher.js","sourcesContent":["ï»¿import config from '../api.config';\r\nimport r from 'request-promise';\r\nimport NeoError from './NeoError';\r\n\r\nconst txUrl = config.neo4j.root + '/db/data/transaction/commit';\r\n\r\nconst cypher = (statements, transform) => {\r\n  return r.post({\r\n    uri: txUrl,\r\n    method: 'POST',\r\n    json: { statements: statements },\r\n    headers: {\r\n      'Authorization': config.neo4j.password\r\n    },\r\n    transform:transform\r\n  });\r\n};\r\n\r\nconst isEmpty = (obj) => {\r\n  for (var prop in obj) {\r\n    if (obj.hasOwnProperty(prop))\r\n      return false;\r\n  }\r\n  return true;\r\n};\r\n\r\nconst api = {\r\n  buildStatement: (q, type, params, includeStats) => {\r\n    var out = { 'statement': q, 'includeStats': includeStats ? true : false };\r\n    if (params && !isEmpty(params)) {\r\n      out.parameters = params;\r\n    }\r\n    if (type) {\r\n      out.resultDataContents = [type];\r\n    }\r\n    return out;\r\n  },\r\n  executeStatements: (statements) => {\r\n      // Check api each statement is a statement and not just a query\r\n    statements = statements.map(s => {\r\n      if (!s.statement) { s = api.buildStatement(s); }\r\n      return s;\r\n    });\r\n\r\n    return cypher(statements).then(d => {\r\n      if (d.errors.length) {\r\n        throw (new NeoError(d.errors[0], statements));\r\n      } else {\r\n        return d.results;\r\n      }\r\n    });\r\n  }\r\n    ,\r\n    // Type = graph or row\r\n  executeQuery: (q, type, params) => {\r\n\r\n    const statements = [api.buildStatement(q, type, params)];\r\n\r\n    return cypher(statements).then(d => {\r\n      if (d.errors.length) {\r\n        throw (new NeoError(d.errors[0], statements));\r\n      } else if (d.results.length) {\r\n        return d.results[0].data;\r\n      } else {\r\n        return null;\r\n      }\r\n    });\r\n  }\r\n};\r\n\r\nexport default api;\r\n"]}