{"version":3,"sources":["../../app/api/node.js"],"names":[],"mappings":"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","file":"node.js","sourcesContent":["﻿module.exports = function(config){\r\n    \r\n    \"use strict\";\r\n    \r\n  \r\n    var _ = require(\"lodash\");\r\n    config = _.extend(require('./config.default'), config);\r\n    var image = require(\"./image\")(config);\r\n    var label = require(\"./label\")(config);\r\n    var utils = require(\"./utils\")(config);\r\n    var type = require(\"./type\")(config);\r\n    var cypher = require(\"./cypher\")(config);\r\n    var graph = require(\"./graph\")(config);\r\n    var relationship = require(\"./relationship\")(config);\r\n    var changeCase = require(\"change-case\");\r\n     var predicate = require(\"./predicate\")(config);\r\n  var merge = require('deepmerge');\r\n // var extendify = require('extendify');\r\n//read\r\n//data[0].row \r\n//n , ID, labels\r\nfunction parseNodeData(data){\r\n    var n = utils.camelCase(data[0].row[0]);\r\n    if (data[0].row[1]){\r\n        n.id = data[0].row[1];\r\n    }\r\n    if (data[0].row[2]){\r\n        n.labels = data[0].row[2];\r\n        if (n.labels) {\r\n            n.labels = n.labels.sort();\r\n        }\r\n    }\r\n    return n;\r\n}\r\n\r\n//read\r\nfunction getNode(match, where) {\r\n    \r\n    var q=\"match(\" + match + \")  where \" + where;\r\n    q+=\" with n optional match (\" + match + \") -[:IMAGE] - (i:Image:Main)\";\r\n    q+= \" return n,ID(n),LABELS(n),i \";\r\n    return cypher.executeQuery(q)\r\n    .then(function (data) {\r\n        if (data.length) {\r\n\r\n            var n = parseNodeData(data);\r\n            if (data[0].row[3]){\r\n               n.image = image.configure(data[0].row[3]);\r\n            }\r\n         //   addSchema(n);\r\n            return n;\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    });\r\n}\r\n\r\n//read\r\nfunction getNodeById(id) {\r\n    return getNode(\"n\", \"ID(n) = \" + id );\r\n}\r\n\r\n//read\r\nfunction getNodeByLabel(label) {\r\n    return getNode(\"n:Label\", \"n.Label = '\" + label + \"'\");\r\n}\r\n\r\n//read\r\nfunction addRelationships(n) {\r\n   \r\n    return relationship.list.conceptual(n).then(function(r){\r\n        \r\n        if (Object.keys(r).length){\r\n            /*\r\n            for (var key in r){\r\n                if (r[key].predicate.direction===\"in\"){\r\n                    n[r[key].predicate.reverse] = r[key].items;\r\n                }\r\n                else{\r\n                    n[r[key].predicate.lookup] = r[key].items;\r\n                }\r\n            }\r\n            */\r\n            n.relationships=r;\r\n        }\r\n        return n;\r\n    });\r\n}\r\n\r\n//write\r\n//Create relationships for node n\r\n//requires presence of n.relationships\r\nfunction createRelationships(n){\r\n    var statements = [];\r\n    for (let prop in n.relationships) {\r\n        let rel = n.relationships[prop];\r\n         for (let i = 0; i < rel.items.length; i++) {\r\n            statements.push(relationship.createStatement(n,rel.predicate,rel.items[i]));\r\n         }\r\n    }\r\n    return cypher.executeStatements(statements);\r\n}\r\n\r\n\r\n\r\n//write\r\nfunction updateRelationships(n)\r\n{\r\n    //check passed in node against saved node for differences\r\n    return relationship.difference(n).then(function(diff)\r\n        {\r\n            if (diff.length){\r\n                var statements = [];\r\n                for (var c = 0;c<diff.length;c++){\r\n                    let changed = diff[c];\r\n                    for (let i = 0; i < changed.add.length; i++) {\r\n                        statements.push(relationship.createStatement(n,changed.predicate,changed.add[i]));\r\n                    }\r\n                    for (let i = 0; i < changed.remove.length; i++) {\r\n                        statements.push(relationship.removeStatement(n,changed.predicate,changed.remove[i]));\r\n                    }\r\n                }\r\n                return cypher.executeStatements(statements);\r\n            }\r\n        });\r\n}\r\n //write\r\n function updateProperties(n){\r\n        \r\n         //update props\r\n        var q = \"match(n) where ID(n)={id} set n={props} return n,ID(n),LABELS(n)\";\r\n        return cypher.executeQuery(q, \"row\", { \"id\": n.id,\"props\": that.trimForSave(n) })\r\n        .then(parseNodeData);\r\n    }\r\n\r\n//write\r\nfunction updateLabels(n){\r\n\r\n        label.addParents(n);\r\n        n.labels=utils.pascalCase(n.labels);\r\n        var statements=[];\r\n        //check passed in node against saved node for differences\r\n        return that.get(n)\r\n            .then(function(existing){\r\n            \r\n            //simpler to \r\n            var arrLabelsToRemove = _.difference(existing.labels,n.labels);//The array to inspect, The values to exclude.\r\n            var arrLabelsToAdd = _.difference(n.labels,existing.labels);\r\n            \r\n            if (arrLabelsToAdd.length || arrLabelsToRemove.length) {\r\n                var sAddLabels = \"\";\r\n                if (arrLabelsToAdd.length) {\r\n                    sAddLabels = \" set n:\" + arrLabelsToAdd.join(\":\");\r\n                }\r\n                \r\n                var sRemoveLabels = \"\";\r\n                if (arrLabelsToRemove.length) {\r\n                    sRemoveLabels = \" remove n:\" + arrLabelsToRemove.join(\":\");\r\n                }\r\n                statements.push({ statement: \"match(n) where ID(n)=\" + n.id + sRemoveLabels + sAddLabels});\r\n            }\r\n            \r\n            //update item labels if changing Label property\r\n            if (existing.label && existing.label != n.label && n.label) {\r\n                statements.push({ statement: \"match(n:\" + existing.label + \") remove n:\" + existing.label + \" set n:\" + n.label });\r\n            }\r\n            \r\n           if (statements.length){\r\n                return cypher.executeStatements(statements);\r\n            }  \r\n        });\r\n}\r\n//Returns an object containing properties defined by types in labels\r\n//Requires n.labels\r\nfunction getSchema(labels) {\r\n    var label,t,schema = {};\r\n    for (let i = 0; i < labels.length; i++) {\r\n        label = labels[i];\r\n        t = type.list[changeCase.camelCase(label)];\r\n        if (!t) continue;//ignore if label does not have a type definition\r\n        \r\n        //can't use extend because need to ensure that required=true \r\n        //always takes precendence over required=false\r\n        for (let key in t.props){\r\n            let required=false;\r\n            if (schema[key])\r\n            {\r\n                required = schema[key].required;\r\n            }\r\n            schema[key] = t.props[key];\r\n            if (required){\r\n                schema[key].required=true;\r\n            }\r\n        }\r\n    }\r\n    return schema;\r\n}\r\n\r\n\r\nfunction addSchema(n){\r\n    n.schema = getSchema(n.labels);\r\n    return n;\r\n }\r\n\r\nvar that = {\r\n    //get node by (internal)ID or label\r\n    get: function (id) {\r\n        var parsed = utils.parseIdOrLabel(id);\r\n        if (parsed.id){\r\n             return getNodeById(parsed.id);\r\n        }\r\n        if (parsed.label){\r\n             return getNodeByLabel(parsed.label) ;\r\n        }\r\n \r\n    }\r\n    ,\r\n    //Get node by (internal ID) or label\r\n    //Add relationships\r\n    getWithRels: function (id) {\r\n\r\n        var parsed = utils.parseIdOrLabel(id);\r\n        console.log(parsed);\r\n        if (parsed.id){\r\n            return getNodeById(parsed.id)\r\n            .then(addRelationships);\r\n        }\r\n        \r\n        if (parsed.label){\r\n            return getNodeByLabel(parsed.label)\r\n            .then(addRelationships);\r\n        }\r\n\r\n    }\r\n    ,\r\n    getRelatedItems:function(obj,reltype,reltypes,classDefs){\r\n   \r\n   //CANT GET IT TO WORK SO THAT IMAGES OF PAINTINGS ARE NOT LAZY LOADED (LOADED WITH THE PAINTING)\r\n   //AND ALSO IN ANOTHER QUERY STILL GET IMAGE.IMAGE_OF .. >PAINTING\r\n   \r\n     //find out if class has any nolazy reltypes that need to be loaded with it\r\n     let nolazy;\r\n     _.forOwn(reltypes,r=>{\r\n            _.forOwn(classDefs[r.class].reltypes,r2=>{\r\n                  if (r2.nolazy ) nolazy = r2;\r\n            })\r\n        });\r\n   \r\n      \r\n \r\n      /*\r\n        //nolazy is only respected for outbound relationships\r\n       // if (reltype.direction === 'out'){\r\n                for (let k in reltypes){\r\n                let r = reltypes[k];\r\n              //  if (r.direction===\"out\")\r\n             //   {\r\n                    for (let j in classDefs[r.class].reltypes)\r\n                {\r\n                    let r2 = classDefs[r.class].reltypes[j];\r\n                    if (r2.nolazy )\r\n                    {\r\n                        nolazy = r2;\r\n                    }\r\n                }\r\n              //  }\r\n                \r\n            }\r\n      \r\n            \r\n     //   }\r\n        */\r\n        \r\n        let q;\r\n        if (obj.class){//not sure why but no class is being set for images\r\n            q  = \" match (n:\" + obj.class + \")\";\r\n        }\r\n        else{\r\n             q  = \" match (n)\";\r\n        }\r\n       \r\n        let r =  reltype.predicate.lookup.toUpperCase();\r\n        \r\n        if (reltype.direction === \"out\"){\r\n            q += \" - [:\" + r + \"] -> (m:\" + reltype.class + \") \";\r\n         \r\n        }\r\n        else{\r\n            q += \" <- [:\" + r + \"] - (m:\" + reltype.class + \") \";\r\n        }\r\n        \r\n        //not sure if we need to respect the direction of the nolazy ?\r\n        if (nolazy){\r\n            q+= \" - [:\" + nolazy.predicate.lookup + \"] -> (nz) \";//:\" + nolazy.class + \") \";//NOT SURE HOW TO GET CORRCET CLASS FOR NOLAZY\r\n        }\r\n\r\n       // q += \" where n.Lookup='\" + obj.lookup + \"' return m \";\r\n        q += \" where ID(n)=\" + obj.id + \" return m,ID(m) \";\r\n        \r\n        if (nolazy){\r\n            q+=\",collect(nz),collect(ID(nz))\";\r\n        }  \r\n    \r\n    console.log(q);\r\n\r\n        //todo: work out efficient way to get images of pictures\r\n        //have a rule that always gets images along with pictures (but not other types)\r\n        //Remove the resolve function for image types if parent is picture\r\n\r\n        return cypher.executeQuery(q).then(function(data){\r\n            return  data.map(function(d){\r\n                    let n = utils.camelCase(d.row[0]);\r\n                    n.id=d.row[1];\r\n                    \r\n                       if (nolazy){\r\n                           let ids = d.row[3].map(function(e){return {id:e}});\r\n                           let props = d.row[2].map(function(e){return utils.camelCase(e)})\r\n                           n[nolazy.predicate.lookup.toLowerCase()] = _.merge(ids,props);\r\n                       }\r\n        \r\n                    return n;\r\n                });\r\n        });\r\n    }\r\n    ,\r\n    \r\n    getForGraphQL:function(id,c){\r\n     \r\n/*\r\n             var q = utils.getMatch(id);\r\n             \r\n             q += \"with n match (n)-[:INSTANCE_OF]->(class:Class)-[r]-(c:Class) \";\r\n             q += \"WHERE TYPE(r)<>'EXTENDS' \";\r\n             q += \" with n,r,c match n-[q]-a-[:INSTANCE_OF]->c where type(r) = type(q) \";\r\n             q += \" return n,ID(n),labels(n),type(r),collect(a) \";\r\n             \r\n            //returns relationships with 'has' properties eg picture has image\r\n            //but returns nothing if there a no has relationships\r\n\r\n            match (n:Label {Lookup:'Delacroix'})-[:INSTANCE_OF]->(class:Class)-[r]-(c:Class) \r\n            WHERE TYPE(r)<>'EXTENDS' \r\n            with n,r,c match n-[q]-a-[:INSTANCE_OF]->c where type(r) = type(q) \r\n            with n,a,c,r\r\n            match c - [:EXTENDS*] -> (b:Class) - [:HAS] -> (d:Class) \r\n            with n,a,r\r\n            match (a) -[]->(i)-[:INSTANCE_OF]->d \r\n            return type(r),collect(a),collect(i)\r\n*/\r\n            \r\n\r\n             var statements = [];\r\n             for (var key in c.reltypes){\r\n                 \r\n                 let r = c.reltypes[key].predicate.lookup.toUpperCase();\r\n                 \r\n                if (c.reltypes[key].direction === \"out\"){\r\n                    statements.push (utils.getMatch(id) + \" with n match n - [:\" + r + \"] -> m return n,collect(m) \");\r\n                }\r\n                else{\r\n                    statements.push (utils.getMatch(id) + \" with n match n <- [:\" + r + \"] - m return n,collect(m) \");\r\n                }\r\n             }\r\n             console.log(statements);\r\n             //todo: include 'has' properties eg painting images\r\n\r\n            var out = {};\r\n            return cypher.executeStatements(statements).then(function(results){\r\n\r\n           \r\n                let n = utils.camelCase(results[0].data[0].row[0]);\r\n\r\n                let counter=0;\r\n                for (var key in c.reltypes){\r\n                      \r\n                    let data = results[counter].data;\r\n                      \r\n                    data.forEach(function(d){\r\n                        n[key]= d.row[1].map(function(e){\r\n                            return utils.camelCase(e);\r\n                        });\r\n                    });\r\n                      \r\n                   counter +=1;\r\n                }\r\n\r\n              return n;\r\n                \r\n                \r\n            });\r\n          \r\n                \r\n       \r\n    }\r\n    ,\r\n    //returns a new property object for the node\r\n    //--removes any empty propertes\r\n    //--removes id property as this is internal to neo4j\r\n    //--removes labels property as this is persisted with labels in neo4j\r\n    //--remove temp property as this data should not be persisted\r\n    trimForSave : function (n) {\r\n        \r\n        var props = {};\r\n        \r\n        for (var key in n)\r\n        {\r\n            if (n[key] !== null && n[key] !== undefined && n[key] !== \"\" &&\r\n            key !== \"labels\" && \r\n            key !== \"labelled\" && \r\n            key != \"relationships\" && \r\n            key != \"image\" && \r\n            key !== \"id\" && \r\n            key !== \"temp\" &&\r\n            key !== \"schema\" &&\r\n            key !== \"web\")//web links ?? not implemented yet\r\n            {\r\n                props[key] = n[key];\r\n            }\r\n        }\r\n        return utils.pascalCase(props);\r\n    }\r\n    ,\r\n    //TODO: \r\n    //for labels (types), type hierachy needs to be enforced - eg if Painter then add Person:Global,-----------------DONE\r\n    //if Painting the add Picture:Creation. These will need to be kept updated.\r\n    //when Lookup is updated, the corresponding label needs to be renamed MATCH (n:OLD_LABEL)  REMOVE n:OLD_LABEL SET n:NEW_LABEL--------------- DONE\r\n    //when updating Type, label needs to be updated, when creating----------------------DONE\r\n    //When we come to modifying labels on creations, their relationships will need to be kept updated\r\n    save: function (n,user) {\r\n\r\n        if (n.id > -1) { \r\n           return that.update(n,user);\r\n        }\r\n        else {\r\n           return that.create(n,user);\r\n        }\r\n    }\r\n    ,\r\n    //n can be an object with any properties\r\n    //the following properties have special meaning:\r\n    //--id: must not be > -1 as this indicates an existing node\r\n    //--labels: an array of strings. The node will be saved with these neo4j labels. Required.\r\n    //--temp.relationships: relationships defined as properties. Not Required.\r\n    //--temp.links: links .. ??? Not Required\r\n    //user is an optional parameter\r\n    //--if supplied and user exists a 'created' relationship is added\r\n    //Following save each rel is created as a neo4j relationship\r\n    create:function(n,user)\r\n    {\r\n        if (n.id >-1) throw (\"Node must have ID < 0 for insert\");\r\n        if (!(n.labels instanceof Array)) throw (\"Node must have labels array property\");\r\n\r\n        label.addParents(n);\r\n        n.labels=utils.pascalCase(n.labels);\r\n        var q = \"create (n:\" + n.labels.join(\":\") + \" {props}) with n set n.created=timestamp() \";\r\n\r\n        //if user passed as second argument create a link to the user from this node\r\n        if (user) {\r\n            q += \" with n  MATCH (u:User {Lookup:'\" + user.lookup + \"'})  create (u) - [s:CREATED]->(n)\";\r\n        }\r\n        q += \" return n,ID(n)\";\r\n\r\n        return cypher.executeQuery(q, \"row\", { \"props\": that.trimForSave(n) })\r\n            .then(function (result) {\r\n                n = _.extend(n,parseNodeData(result));\r\n                return createRelationships(n);\r\n            })\r\n            .then(function(){\r\n                return that.getWithRels(n);\r\n            });\r\n    }\r\n\r\n    ,\r\n    update:function(n,user){\r\n\r\n        if (n.id <=-1) throw (\"Node must have ID >=0 for update\");\r\n\r\n        //NB Have to update labels before properties in case label property has been modified\r\n        return  updateLabels(n).\r\n                then(function(){\r\n                    return updateProperties(n);\r\n                }).\r\n                then(function(){\r\n                    return updateRelationships(n);\r\n                }).\r\n                then(function(){\r\n                    return that.getWithRels(n);\r\n                });\r\n    }\r\n    ,\r\n    //Deletes node and relationships forever\r\n    destroy: function (node) {\r\n\r\n        var q = \"match (n) where ID(n)=\" + node.id + \"  OPTIONAL MATCH (n)-[r]-()  delete n,r\";\r\n        return cypher.executeQuery(q);\r\n    }\r\n    ,\r\n    //Logical delete (relationships are left intact)\r\n    //--removes labels and adds label Deleted\r\n    //--sets property deleted = timestamp\r\n    //--stores labels in oldlabels property\r\n    delete: function (node) {\r\n\r\n        if (!node || !node.id){\r\n            throw \"node not supplied\";\r\n        }\r\n\r\n        var q = \"match(n)  where ID(n)=\" + node.id + \"  remove n:\" + node.labels.join(':');\r\n        q += \" set n:Deleted,n.oldlabels={labels},n.deleted=timestamp()  return n,ID(n),LABELS(n)\";\r\n        \r\n        return cypher.executeQuery(q, \"row\", { \"labels\": node.labels })\r\n        .then(parseNodeData);\r\n  \r\n    }\r\n    ,\r\n    //Removes 'Deleted' label and restores old labels\r\n    //Currently requires the 'oldlabels' property to be present on the node\r\n    restore: function (node) {\r\n\r\n        if (!node || !node.id){\r\n            throw \"node not supplied\";\r\n        }\r\n\r\n        var q = \"match(n)  where ID(n)=\" + node.id + \"  set n:\" + node.oldlabels.join(':');\r\n        q += \" remove n:Deleted,n.oldlabels,n.deleted return n,ID(n),LABELS(n) \";\r\n\r\n        return cypher.executeQuery(q)\r\n        .then(parseNodeData);\r\n    }\r\n    ,\r\n    getSchema:function(id){\r\n        return that.getLabels(id).then(function(labels){\r\n             return getSchema(labels);\r\n        });\r\n    }\r\n    ,\r\n    getLabels:function(id){\r\n        var q = utils.getMatch(id) + \" with n return LABELS(n)\";\r\n        return cypher.executeQuery(q)\r\n        .then(function (data) {\r\n            if (data.length) {\r\n                return data[0].row[0];\r\n            }\r\n            else {\r\n                return [];\r\n            }\r\n        });\r\n    }\r\n    ,\r\n    list:{\r\n        //returns an array of nodes that have this label\r\n        labelled: function (label,limit) {\r\n            \r\n            limit = limit || 500;\r\n            var q = \"match (n:\" + changeCase.pascalCase(label) + \") return ID(n),n limit \" + limit;\r\n           console.log(q);\r\n            return cypher.executeQuery(q).then(function (data) {\r\n        \r\n                var labelled = [];\r\n                for (var i = 0; i < data.length; i++) {\r\n                    let item = utils.camelCase(data[i].row[1]);\r\n                    item.id=data[i].row[0];\r\n                    labelled.push(item);\r\n                }\r\n                console.log(labelled);\r\n                return labelled;\r\n            });\r\n\r\n        }\r\n        ,\r\n        search:function(baseType,baseArgs,selections,classDefs){\r\n        \r\n        \r\n            let query = {\r\n                type:baseType,\r\n                args :\r\n                { \r\n                    reltypes:_.omitBy(_.mergeWith(_.clone(baseArgs), _.clone(baseType.reltypes), (arg,reltype)=>{\r\n                    return _.assignIn(reltype,{target:arg});\r\n                    }),val=>!val.target),\r\n                        props:_.omitBy(_.mergeWith(_.clone(baseArgs), _.clone(baseType.props), (arg,prop)=>{\r\n                        return _.assignIn(prop,{target:arg});\r\n                    }),val=>!val.target)\r\n                }\r\n                ,\r\n                selection:{}\r\n                ,\r\n                q:\"\",\r\n                params:{}\r\n                \r\n            };\r\n           query.relAliases=new Array();\r\n            query.neo = neo(query);\r\n             let aliasPrefixes = (\"a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z\").split(\",\");\r\n            \r\n            function neoRelationship(reltype,relAlias){\r\n             \r\n                relAlias = relAlias || \"\";\r\n                \r\n                if (reltype.predicate.symmetrical){\r\n                   return \" - [\" + relAlias + \":\" + reltype.predicate.lookup + \"] - \";\r\n                }\r\n                else if (reltype.direction === \"out\"){\r\n                   return \" - [\" + relAlias + \":\" + reltype.predicate.lookup + \"] -> \";\r\n                }\r\n                else{\r\n                   return \" <- [\" + relAlias + \":\" + reltype.predicate.lookup + \"] - \";\r\n                }\r\n                   //  q+= \"(m:Label {Label:'\" + rel.target + \"'}) \";\r\n            }\r\n            \r\n            function neoTarget(reltype,level){\r\n                \r\n                let alias = \"t\" + level;\r\n                  \r\n                if (reltype.target){\r\n                    return \"(\" + alias + \":\" + reltype.class + \" {Lookup:'\" + reltype.target + \"'}) \";\r\n                }\r\n                else{\r\n                    return \"(\" + alias + \":\" + reltype.class + \")\";\r\n                }\r\n                   //  q+= \"(m:Label {Label:'\" + rel.target + \"'}) \";\r\n            }\r\n            \r\n            function neo(s,level,aliases,aliasprefix,parentAlias,query){\r\n \r\n                aliases = aliases || new Array();\r\n                level = level || 0;\r\n                aliasprefix = aliasprefix || \"a\";\r\n                query = query || s;//base query\r\n                let q = \"\";\r\n                let params={};\r\n                let alias = aliasprefix + level;\r\n                let withAliases = \"\";\r\n                \r\n\r\n                if (aliases.length){\r\n                    q = \" with \" + aliases.join(\",\") + \" \";\r\n                }\r\n                if (query.relAliases.length){//not currently in use but might be needed if graph type if required at some point\r\n                    q+=\",\" + query.relAliases.join(\",\");\r\n                }\r\n                \r\n                aliases.push(alias);\r\n                withAliases = \" with \" + aliases.join(\",\") + \" \";\r\n                if (query.relAliases.length){\r\n                    withAliases+=\",\" + query.relAliases.join(\",\");\r\n                }\r\n                \r\n                q += \" match (\" + alias + \":\" + s.type.lookup + \") \";\r\n\r\n               // args.reltypes form additional filtering via relationship\r\n               // args.props form additional filtering via where clause\r\n                \r\n                _.forOwn(s.args.reltypes,reltype=>{\r\n                    q+= withAliases + \" match (\" + alias + \") \" + neoRelationship(reltype) + neoTarget(reltype,level);\r\n                })\r\n\r\n                let cnt = 0;\r\n\r\n                _.forOwn(s.args.props,prop=>{\r\n                    if (cnt ===0){\r\n                        q +=\" where \";\r\n                    }\r\n                    else{\r\n                        q+= \" and \";\r\n                    }\r\n                    \r\n                    if (prop.name === \"id\"){\r\n                         q+= \"ID(\" + alias + \") = {\" + alias + prop.name + \"} \";\r\n                    }\r\n                    else{\r\n                       q+= alias + \".\" + changeCase.pascalCase(prop.name) + \" = {\" + alias + prop.name + \"} \";\r\n                    }\r\n                    \r\n                 \r\n                    params[alias + prop.name] = prop.target;\r\n                    cnt +=1;\r\n                })\r\n                \r\n                \r\n               // if (s.reltype) then query acts on a relationship with parent alias\r\n               // (otherwise it starts with just the type (base query))\r\n                if (s.reltype){\r\n                    let relAlias = parentAlias + \"_\" + alias;\r\n                    q += withAliases + \" match (\" + parentAlias + \") \" + neoRelationship(s.reltype,relAlias) + \"(\" + alias + \") \";\r\n                    query.relAliases.push(relAlias);\r\n                }\r\n                \r\n              //accumulate query and params\r\n              query.q += \" \" + q + \" \";\r\n              _.assignIn(query.params,params);\r\n\r\n                return {\r\n                    alias:alias,\r\n                    q:q,\r\n                    params:params\r\n                }\r\n           }\r\n     \r\n            \r\n            function recursiveSelection(s,selection,parentType,level,aliases,aliasPrefix,parentAlias,query){\r\n                \r\n               if (s.selectionSet){\r\n\r\n                    let reltype=s.name.value;\r\n                    let type = classDefs[parentType.reltypes[reltype].class];\r\n                    let args = _.mapValues(\r\n                        _.keyBy(s.arguments.map(\r\n                            arg=>({key:arg.name.value,value:arg.value.value})),'key')\r\n                            ,val=>val.value);\r\n                            \r\n                    selection[reltype] = {\r\n                        type:type   \r\n                        ,\r\n                        args: {\r\n                          reltypes:_.omitBy(_.mergeWith(_.clone(args), _.clone(type.reltypes), (arg,reltype)=>{\r\n                            return _.assignIn(reltype,{target:arg});\r\n                        }),val=>!val.target),\r\n                            props:_.omitBy(_.mergeWith(_.clone(args), _.clone(type.props), (arg,prop)=>{\r\n                            return _.assignIn(prop,{target:arg});\r\n                        }),val=>!val.target)\r\n                        }\r\n                        ,\r\n                        reltype:parentType.reltypes[reltype]\r\n                        ,\r\n                        selection:{}\r\n                    };\r\n                        \r\n                    selection[reltype].neo = neo(selection[reltype],level,aliases,aliasPrefix,parentAlias,query);\r\n                    s.selectionSet.selections.forEach((sNext,i)=>{\r\n                         recursiveSelection(sNext,selection[reltype].selection,type,level+1,aliases,aliasPrefixes[i],selection[reltype].neo.alias,query);\r\n                    })\r\n                  }\r\n            }\r\n            \r\n            query.usedAliases = [query.neo.alias];\r\n            selections.forEach((s,i)=>{\r\n                 recursiveSelection(s,query.selection,baseType,1,query.usedAliases,aliasPrefixes[i],query.neo.alias,query);\r\n            });\r\n          \r\n\r\n           query.q += \" return \" + query.usedAliases.join(\",\");\r\n           if (query.relAliases.length){\r\n               query.q+=\",\" + query.relAliases.join(\",\");\r\n           }\r\n           let ids = query.usedAliases.map(alias=>{return \"ID(\" + alias + \")\";})\r\n           query.q += \",\" + ids.join(\",\");\r\n\r\n           return cypher.executeStatements([cypher.buildStatement(query.q,\"row\",query.params)]).then(function(results){\r\n                let data = [];\r\n                results[0].data.forEach(d=>{\r\n                    let row = {};\r\n                    let cnt = 0;\r\n                    results[0].columns.forEach(col =>{\r\n                        if (col.indexOf(\"ID(\")===-1){\r\n                            row[col]=utils.camelCase(d.row[cnt]);\r\n                        }\r\n                        else{\r\n                            let idForCol = col.replace(\"ID(\",\"\").replace(\")\",\"\");\r\n                            row[idForCol].id = d.row[cnt];\r\n                        }\r\n                   \r\n                        cnt+=1;\r\n                    })\r\n                    data.push(row)\r\n                });\r\n                \r\n                let grouped = _.groupBy(data,(item)=>{return item.a0.id; });\r\n\r\n                let reltypePrefix = \"RELTYPE_\";\r\n\r\n                function fill(selection,row,obj){\r\n                        _.forOwn(selection,(reltype,reltypekey)=>{\r\n                            let k = reltypePrefix + reltypekey;\r\n                            if (!obj[k]){\r\n                                obj[k]={};\r\n                            }\r\n                            obj[k][row[reltype.neo.alias].id] = row[reltype.neo.alias];\r\n                            fill(reltype.selection,row,obj[k][row[reltype.neo.alias].id]);\r\n                        });\r\n                    }\r\n            \r\n                let transformed = {};     \r\n                \r\n                _.forOwn(grouped,item=>{\r\n                        item.forEach(row=>{\r\n                            let out = row[query.neo.alias];\r\n                            fill(query.selection,row,out);\r\n                            if (transformed[out.id]){\r\n                                transformed[out.id] = merge(transformed[out.id],out);\r\n                            }\r\n                            else{\r\n                            transformed[out.id]=out;\r\n                            }\r\n                        });\r\n                })\r\n\r\n                function toArray(item){\r\n                    _.forOwn(item,(val,key)=>{\r\n                        if (key.indexOf(reltypePrefix) === 0)\r\n                        {\r\n                            let k= key.replace(reltypePrefix,\"\");\r\n                            item[k]=[];\r\n                            _.forOwn(val,(val2,key2)=>{\r\n                                toArray(val2);\r\n                                item[k].push(val2);\r\n                            });\r\n                        }\r\n                    })\r\n                }\r\n\r\n                _.forOwn(transformed,item=>{\r\n                    toArray(item);\r\n                });\r\n\r\n                return _.values(transformed);       \r\n            });\r\n        }\r\n    }\r\n};\r\n\r\n\r\nreturn that;\r\n \r\n};\r\n\r\n"]}