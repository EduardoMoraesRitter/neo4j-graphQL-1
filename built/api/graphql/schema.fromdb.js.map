{"version":3,"sources":["../../../app/api/graphql/schema.fromdb.js"],"names":[],"mappings":";;;;;;AAAA;;AASA;;;;AACA;;;;;;;AAEA,IAAI,SAAS,QAAQ,qBAAR,CAAT;;;AAGJ,IAAI,UAAU,QAAQ,YAAR,EAAsB,MAAtB,CAAV;AACJ,IAAI,OAAO,QAAQ,SAAR,EAAmB,MAAnB,CAAP;AACJ,IAAI,WAAW,QAAQ,UAAR,EAAoB,MAApB,CAAX;;AAKJ,IAAI,mBAAmB,SAAU;;AAE7B,QAAI,MAAM,EAAN,CAFyB;AAG7B,SAAK,IAAI,IAAJ,IAAY,KAAjB,EAAuB;AACnB,YAAI,IAAI,MAAM,IAAN,CAAJ,CADe;AAEnB,gBAAQ,EAAE,IAAF;AACJ,iBAAK,SAAL;AACI,oBAAI,IAAJ,IAAY,EAAC,MAAK,cAAL,EAAb,CADJ;AAEI,sBAFJ;AADJ,iBAIS,QAAL;AACI,oBAAI,IAAJ,IAAY,EAAC,yBAAD,EAAZ,CADJ;AAEI,sBAFJ;AAJJ;AAQQ,oBAAI,IAAJ,IAAY,EAAC,4BAAD,EAAZ,CADJ;AAPJ,SAFmB;KAAvB;;AAcA,WAAO,GAAP,CAjB6B;CAAV;;AAoBvB,IAAI,iBAAiB,MAAM;;AAGxB,WAAO,SAAS,WAAT,GAAuB,IAAvB,CAA4B,aAAa;;AAI3C,YAAI,UAAS,EAAT,CAJuC;;AAM3C,aAAK,IAAI,IAAJ,IAAY,SAAjB,EAA2B;;AAEvB,gBAAI,IAAI,UAAU,IAAV,CAAJ,CAFmB;;AAIvB,oBAAO,IAAP,IAAa;AACT,sBAAK,+BACD;AACI,0BAAK,IAAL;AACA,iCAAY,EAAE,WAAF;AACZ,4BAAO,MAAM;AACT,4BAAI,IAAI,iBAAiB,EAAE,KAAF,CAArB,CADK;;AAGT,6BAAK,IAAI,UAAJ,IAAkB,EAAE,QAAF,EACvB;AACI,gCAAI,UAAU,EAAE,QAAF,CAAW,UAAX,CAAV,CADR;AAEI,gCAAI,UAAU,QAAO,QAAQ,KAAR,CAAP,CAAsB,IAAtB,CAFlB;AAGI,8BAAE,UAAF,IAAgB;AACZ,sCAAK,yBAAgB,OAAhB,CAAL;6BADJ,CAHJ;;AAOK,gCAAI,CAAC,QAAQ,MAAR,IAAkB,QAAQ,SAAR,KAAoB,IAApB,EAA0B;;AAC1C,kCAAE,UAAF,EAAc,OAAd,GAAsB,UAAS,GAAT,EAAa;AACnC,2CAAO,KAAK,eAAL,CAAqB,GAArB,EAAyB,OAAzB,EAAiC,EAAE,QAAF,EAAW,SAA5C,CAAP,CADmC;iCAAb,CADoB;6BAAjD;yBARL;;AAgBA,+BAAO,CAAP,CAnBS;qBAAN;iBAJV,CAAL;AA0BC,sBAAK,EAAC,IAAG,EAAC,4BAAD,EAAH,EAAN;AACA,yBAAQ,iBAAS,CAAT,EAAW,IAAX,EAAgB;AACpB,2BAAO,KAAK,GAAL,CAAS,KAAK,EAAL,CAAhB,CADoB;iBAAhB;aA5Bb,CAJuB;SAA3B;;AAuCA,eAAO,OAAP,CA7C2C;KAAb,CAAnC,CAHwB;CAAN;;AAsDrB,IAAI,MAAM;;AAEN,UAAK,OAAO;;AAER,yBAAiB,IAAjB,CAAsB,YAAU;;AAE5B,gBAAI,SAAS,2BAAkB;AAC/B,uBAAM,+BAAsB;AACpB,0BAAM,OAAN;AACA,4BAAO,MAAM,QAAN;iBAFT,CAAN;aADa,CAAT,CAFwB;;AAS3B,gBAAI,GAAJ,CAAQ,UAAR,EAAmB,8BAAY;AAC5B,wBAAO,MAAP;AACA,0BAAS,IAAT;aAFgB,CAAnB,EAT2B;SAAV,CAAtB,CAFQ;KAAP;CAFL;;kBAsBW","file":"schema.fromdb.js","sourcesContent":["import {\r\n    GraphQLSchema,\r\n    GraphQLObjectType,\r\n    GraphQLInt,\r\n    GraphQLString,\r\n    GraphQLList\r\n} from 'graphql';\r\n\r\n\r\nimport GraphQLHTTP from 'express-graphql';\r\nimport types from './types.js';\r\n//import picture from '../picture';\r\nvar config = require('../../api.config.js');\r\n\r\n// import classDefs from './classDefs';\r\nvar picture = require('../picture')(config);\r\nvar node = require('../node')(config);\r\nvar classDef = require('../class')(config);\r\n\r\n\r\n\r\n\r\nlet makeGraphQLprops = (props) =>{\r\n    \r\n    let out = {};\r\n    for (let pkey in props){\r\n        let p = props[pkey];\r\n        switch (p.type){\r\n            case \"boolean\":\r\n                out[pkey] = {type:GraphQLBoolean};\r\n                break;\r\n            case \"number\":\r\n                out[pkey] = {type:GraphQLInt};\r\n                break;\r\n            default :\r\n                out[pkey] = {type:GraphQLString};\r\n        }\r\n    }\r\n            \r\n    return out;\r\n};\r\n\r\nlet generateFields = () => {\r\n\r\n\r\n   return classDef.refreshList().then((classDefs)=>{\r\n        \r\n    \r\n        \r\n        let fields = {};\r\n           \r\n        for (var tkey in classDefs){\r\n            \r\n            let t = classDefs[tkey];\r\n\r\n            fields[tkey]={\r\n                type:new GraphQLObjectType(\r\n                    {\r\n                        name:tkey,\r\n                        description:t.description,\r\n                        fields:() => {\r\n                            let p = makeGraphQLprops(t.props);\r\n                          \r\n                            for (let reltypekey in t.reltypes)\r\n                            {\r\n                                let reltype = t.reltypes[reltypekey];\r\n                                let objtype = fields[reltype.class].type; \r\n                                p[reltypekey] = {\r\n                                    type:new GraphQLList(objtype)\r\n                                    };\r\n                                    \r\n                                 if (!reltype.nolazy || reltype.direction==='in') {//only respect nolazy for outbound rleationships ? eg enable getting image.image_of..>picture\r\n                                        p[reltypekey].resolve=function(obj){\r\n                                        return node.getRelatedItems(obj,reltype,t.reltypes,classDefs);\r\n                                    }  \r\n                                 } \r\n                                    \r\n                            }\r\n                          \r\n                            return p;\r\n                        }\r\n                    }),\r\n                 args:{id:{type:GraphQLString}} ,\r\n                 resolve:function(_,args){\r\n                     return node.get(args.id);\r\n                 }  \r\n            };\r\n            \r\n        }\r\n        \r\n        return fields;\r\n        \r\n    });\r\n\r\n};\r\n\r\nvar out = {\r\n\r\n    load:(app)=>{\r\n        \r\n        generateFields().then((fields)=>{\r\n            \r\n            let schema = new GraphQLSchema({\r\n            query:new GraphQLObjectType({\r\n                    name: 'Query',\r\n                    fields:() => fields\r\n                })\r\n            });\r\n            \r\n             app.use('/graphql',GraphQLHTTP({\r\n                schema:schema,\r\n                graphiql:true\r\n            }));\r\n                \r\n        });   \r\n    }\r\n};\r\n\r\nexport default out;\r\n\r\n\r\n\r\n"]}