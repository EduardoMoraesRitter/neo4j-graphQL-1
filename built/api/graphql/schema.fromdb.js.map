{"version":3,"sources":["../../../app/api/graphql/schema.fromdb.js"],"names":[],"mappings":"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","file":"schema.fromdb.js","sourcesContent":["import {\r\n    GraphQLSchema,\r\n    GraphQLObjectType,\r\n    GraphQLInt,\r\n    GraphQLString,\r\n    GraphQLList\r\n} from 'graphql';\r\n\r\n\r\n\r\nimport GraphQLHTTP from 'express-graphql';\r\nimport types from './types.js';\r\n//import picture from '../picture';\r\nvar config = require('../../api.config.js');\r\n\r\n\r\n// import classDefs from './classDefs';\r\nvar picture = require('../picture')(config);\r\nvar node = require('../node')(config);\r\nvar classDef = require('../class')(config);\r\nlet lodash = require(\"lodash\");\r\n\r\nlet makeGraphQLListArgs = (t)=>{\r\n    \r\n    let out =  makeGraphQLprops(t.props);\r\n    \r\n     for (let reltypekey in t.reltypes)\r\n    {\r\n        out[reltypekey]={type:GraphQLString};\r\n     }\r\n    \r\n    return out;\r\n    \r\n    \r\n}\r\n\r\n\r\nlet makeGraphQLprops = (props) =>{\r\n    \r\n    let out = {};\r\n    for (let pkey in props){\r\n        let p = props[pkey];\r\n        switch (p.type){\r\n            case \"boolean\":\r\n                out[pkey] = {type:GraphQLBoolean};\r\n                break;\r\n            case \"number\":\r\n                out[pkey] = {type:GraphQLInt};\r\n                break;\r\n            default :\r\n                out[pkey] = {type:GraphQLString};\r\n        }\r\n    }\r\n            \r\n    return out;\r\n};\r\n\r\nlet generateFields = () => {\r\n\r\n\r\n   return classDef.refreshList().then((classDefs)=>{\r\n        \r\n    \r\n        \r\n        let fields = {};\r\n           \r\n         lodash.forOwn(classDefs,t=>{\r\n             \r\n             let single = new GraphQLObjectType(\r\n                {\r\n                    name:t.lookup,\r\n                    description:t.description,\r\n                    fields:() => {\r\n                        let p = makeGraphQLprops(t.props);\r\n                        \r\n                        for (let reltypekey in t.reltypes)\r\n                        {\r\n                            let reltype = t.reltypes[reltypekey];\r\n                            let objtype = fields[reltype.class].type;\r\n                            p[reltypekey] = {\r\n                                type: new GraphQLList(objtype)\r\n                            };\r\n                            \r\n                            p[reltypekey].args = makeGraphQLListArgs(classDefs[reltype.class]);\r\n                            \r\n                            \r\n                            /*\r\n                            if (!reltype.nolazy || reltype.direction === 'in') {\r\n                                //only respect nolazy for outbound rleationships ? eg enable getting image.image_of..>picture\r\n                                p[reltypekey].resolve = function (obj) {\r\n                                    return node.getRelatedItems(obj, reltype, t.reltypes, classDefs);\r\n                                };\r\n                            }\r\n                            */\r\n                        }\r\n                        \r\n                        return p;\r\n                    }\r\n                });\r\n\r\n\r\n\r\n            fields[t.lookup]={\r\n                type: single,\r\n                 args:{lookup:{type:GraphQLString}} ,\r\n                 resolve:function(undefined,args){\r\n                      return node.get(args.id);\r\n                 } \r\n            };\r\n            \r\n           \r\n            fields[t.lookup+'s']={//t.plural ? -- from db\r\n                type:new GraphQLList(single),\r\n                 args: makeGraphQLListArgs(t),\r\n                 resolve: (source, args, root) => {\r\n                        let selections = root.fieldASTs[0].selectionSet.selections;\r\n                        return node.list.search(t,args,selections,classDefs);//.catch((err)=>{throw err})\r\n                 } \r\n                 \r\n                 \r\n                  \r\n            };\r\n            \r\n        });\r\n        \r\n        return fields;\r\n        \r\n    });\r\n\r\n};\r\n\r\nvar out = {\r\n\r\n    load:(app)=>{\r\n        \r\n        generateFields().then((fields)=>{\r\n            \r\n            let schema = new GraphQLSchema({\r\n            query:new GraphQLObjectType({\r\n                    name: 'Query',\r\n                    fields:() => fields\r\n                })\r\n            });\r\n            \r\n             app.use('/graphql',GraphQLHTTP({\r\n                schema:schema,\r\n                graphiql:true\r\n            }));\r\n                \r\n        });   \r\n    }\r\n};\r\n\r\nexport default out;\r\n\r\n\r\n\r\n"]}