{"version":3,"sources":["../../../app/api/graphql/schema.fromdb.js"],"names":[],"mappings":"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","file":"schema.fromdb.js","sourcesContent":["import {\r\n    GraphQLSchema,\r\n    GraphQLObjectType,\r\n    GraphQLInt,\r\n    GraphQLString,\r\n    GraphQLList\r\n} from 'graphql';\r\nimport {graphql} from 'graphql';\r\nimport {introspectionQuery} from 'graphql/utilities';\r\nimport fs from 'fs';\r\n\r\nimport GraphQLHTTP from 'express-graphql';\r\nimport types from './types.js';\r\n//import picture from '../picture';\r\nvar config = require('../../api.config.js');\r\n\r\n\r\n// import classDefs from './classDefs';\r\nvar picture = require('../picture')(config);\r\nvar node = require('../node')(config);\r\nvar classDef = require('../class')(config);\r\nlet lodash = require(\"lodash\");\r\n\r\nlet makeGraphQLListArgs = (t)=>{\r\n    \r\n    let out =  {};\r\n    \r\n      for (let pkey in t.props){\r\n        let p = t.props[pkey];\r\n        switch (p.type){\r\n            case \"boolean\":\r\n                out[pkey] = {type:GraphQLBoolean};\r\n                break;\r\n            case \"number\":\r\n                out[pkey] = {type:GraphQLInt};\r\n                break;\r\n         //   case \"array[string]\":\r\n         //       out[pkey] ={type:new GraphQLList(GraphQLString)};\r\n         //       break;\r\n            default :\r\n                out[pkey] = {type:GraphQLString};\r\n        }\r\n    }\r\n    \r\n     for (let reltypekey in t.reltypes)\r\n    {\r\n        out[reltypekey]={type:GraphQLString};\r\n     }\r\n    \r\n    return out;\r\n    \r\n    \r\n}\r\n\r\n\r\nlet makeGraphQLprops = (props) =>{\r\n    \r\n    let out = {};\r\n    for (let pkey in props){\r\n        let p = props[pkey];\r\n        switch (p.type){\r\n            case \"boolean\":\r\n                out[pkey] = {type:GraphQLBoolean};\r\n                break;\r\n            case \"number\":\r\n                out[pkey] = {type:GraphQLInt};\r\n                break;\r\n            case \"array<string>\":\r\n                out[pkey] ={type:new GraphQLList(GraphQLString)};\r\n                break;\r\n            default :\r\n                out[pkey] = {type:GraphQLString};\r\n        }\r\n    }\r\n            \r\n    return out;\r\n};\r\n\r\nlet generateFields = () => {\r\n\r\n\r\n   return classDef.refreshList().then((classDefs)=>{\r\n        \r\n    \r\n        \r\n        let fields = {};\r\n           \r\n         lodash.forOwn(classDefs,t=>{\r\n             \r\n             t.graphQLObjectType = new GraphQLObjectType(\r\n                {\r\n                    name:t.lookup,\r\n                    description:t.description,\r\n                    fields:() => {\r\n                        let p = makeGraphQLprops(t.props);\r\n                        \r\n                        for (let reltypekey in t.reltypes)\r\n                        {\r\n                            let reltype = t.reltypes[reltypekey];\r\n                            let objtype = classDefs[reltype.class].graphQLObjectType;\r\n                            p[reltypekey] = {\r\n                                type: new GraphQLList(objtype)\r\n                            };\r\n                            let args =makeGraphQLListArgs(classDefs[reltype.class]);\r\n\r\n                            p[reltypekey].args = args;\r\n                        }\r\n                        \r\n                        return p;\r\n                    }\r\n                });\r\n\r\n/*\r\n\r\n            fields[t.lookup]={\r\n                type: single,\r\n                 args:{\r\n                     lookup:{type:GraphQLString},\r\n                     id:{type:GraphQLInt}\r\n                } ,\r\n                 resolve:function(source,args,root){\r\n                     \r\n                     let selections = root.fieldASTs[0].selectionSet.selections;\r\n                     return node.list.search(t,args,selections,classDefs).then(data=>{return data[0];});\r\n                 } \r\n            };\r\n      */\r\n           \r\n            fields[t.lookup]={//t.plural ? -- from db\r\n                type:new GraphQLList(t.graphQLObjectType),\r\n                 args: makeGraphQLListArgs(t),\r\n                 resolve: (source, args, root) => {\r\n                        let selections = root.fieldASTs[0].selectionSet.selections;\r\n                        return node.list.search(t,args,selections,root.fragments,classDefs);\r\n                    \r\n                        \r\n                     //   ;//.catch((err)=>{throw err})\r\n                       // return data;\r\n                }   \r\n            };\r\n            \r\n         \r\n            \r\n \r\n            \r\n        });\r\n        \r\n        /*\r\n        fields[\"GraphQuery\"]=new GraphQLObjectType({\r\n            name:\"GraphQuery\",\r\n            fields:()=> ({\r\n        node:{type:types.graph},\r\n        provenance:{type:types.graph},\r\n        period:{type:types.graph}\r\n\r\n    })\r\n        });\r\n        */\r\n        return fields;\r\n        \r\n    });\r\n\r\n};\r\n\r\nvar out = {\r\n\r\n    load:(app)=>{\r\n        \r\n        generateFields().then((fields)=>{\r\n            \r\n            let storeType = new GraphQLObjectType({\r\n                    name: 'Store',\r\n                    fields:() => fields\r\n                });\r\n         \r\n            let store = {};\r\n            \r\n            let schema = new GraphQLSchema({\r\n              query:new GraphQLObjectType({\r\n                    name: 'Query',\r\n                    fields:() => ({\r\n                        store:{\r\n                            type:storeType,\r\n                            resolve:()=>store\r\n                        }\r\n                    })\r\n                })\r\n            });\r\n        \r\n            \r\n             app.use('/graphql',GraphQLHTTP({\r\n                schema,\r\n                graphiql:true\r\n            }));\r\n            \r\n            graphql(schema,introspectionQuery).then(function(json){\r\n                fs.writeFile('../data/schema.json',JSON.stringify(json,null,2));\r\n            })\r\n                \r\n        });   \r\n    }\r\n};\r\n\r\nexport default out;\r\n\r\n\r\n\r\n"]}