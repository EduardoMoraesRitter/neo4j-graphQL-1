{"version":3,"sources":["../../src/api/label.js"],"names":[],"mappings":";;AAAA,OAAO,OAAP,GAAiB,UAAS,MAAT,EAAgB;;AAE7B,iBAF6B;;AAI7B,QAAI,SAAS,QAAQ,QAAR,CAAT,CAJyB;AAK7B,aAAS,OAAS,QAAQ,kBAAR,CAAT,EAAsC,MAAtC,CAAT,CAL6B;AAM7B,QAAI,OAAO,QAAQ,QAAR,EAAkB,MAAlB,CAAP,CANyB;AAO7B,QAAI,YAAY,QAAQ,aAAR,EAAuB,MAAvB,CAAZ,CAPyB;AAQ7B,QAAI,SAAS,QAAQ,UAAR,EAAoB,MAApB,CAAT,CARyB;AAS7B,QAAI,aAAa,QAAQ,aAAR,CAAb,CATyB;;AAW7B,QAAI,IAAE,QAAQ,QAAR,CAAF,CAXyB;;AAajC,QAAI,OAAO;;AAEX,cAAK;;;AAID,sBAAU,kBAAU,MAAV,EAAkB;;AAExB,oBAAI,CAAJ,CAFwB;;AAIxB,oBAAI,MAAJ,EAAY;AACR,wBAAI,cAAc,OAAO,IAAP,CAAY,GAAZ,CAAd,GAAiC,8BAAjC,CADI;iBAAZ,MAGK;AACD,wBAAI,IAAI,IAAJ,CAAS,CAAT,CADH;iBAHL;AAMA,uBAAO,OAAO,YAAP,CAAoB,CAApB,EAAuB,IAAvB,CAA4B,UAAU,IAAV,EAAgB;;AAE/C,wBAAI,SAAS,EAAT,CAF2C;;AAI/C,yBAAK,IAAI,IAAI,CAAJ,EAAO,IAAI,KAAK,MAAL,EAAa,GAAjC,EAAsC;AAClC,4BAAI,MAAM,KAAK,CAAL,CAAN,CAD8B;AAElC,6BAAK,IAAI,IAAI,CAAJ,EAAO,IAAI,IAAI,GAAJ,CAAQ,CAAR,EAAW,MAAX,EAAmB,GAAvC,EAA4C;AACxC,gCAAI,QAAQ,IAAI,GAAJ,CAAQ,CAAR,EAAW,CAAX,CAAR,CADoC;AAExC,gCAAI,OAAO,OAAP,CAAe,KAAf,MAA0B,CAAC,CAAD,EAAI;AAC9B,uCAAO,IAAP,CAAY,KAAZ,EAD8B;6BAAlC;yBAFJ;qBAFJ;AASA,2BAAO,MAAP,CAb+C;iBAAhB,CAAnC,CAVwB;aAAlB;;;;;AAgCV,qBAAS,iBAAU,MAAV,EAAkB;AACvB,oBAAI,MAAM,EAAN,CADmB;AAEvB,oBAAI,UAAU,OAAO,MAAP,EACd;AACI,wBAAI,EAAE,YAAF,CAAe,MAAf,EAAsB,KAAK,YAAL,CAAtB,CAAyC,MAAzC,EAAiD;AACjD,4BAAI,IAAJ,CAAS,SAAT,EADiD;qBAArD;AAGA,wBAAI,EAAE,YAAF,CAAe,MAAf,EAAsB,KAAK,WAAL,CAAtB,CAAwC,MAAxC,EAAgD;AAChD,4BAAI,IAAJ,CAAS,QAAT,EADgD;qBAApD;iBALJ;AASA,uBAAO,MAAP,CAXuB;aAAlB;SApCb;;AAmDI,oBAAW,oBAAS,CAAT,EAAW;AAClB,cAAE,MAAF,GAAW,EAAE,IAAF,CAAO,EAAE,MAAF,CAAS,MAAT,CAAgB,KAAK,IAAL,CAAU,OAAV,CAAkB,EAAE,MAAF,CAAlC,CAAP,CAAX,CADkB;AAElB,mBAAO,CAAP,CAFkB;SAAX;;;;;;;;;;;;;;;;;;;;AArDJ,KAAP,CAb6B;;AA6FjC,WAAO,IAAP,CA7FiC;CAAhB","file":"label.js","sourcesContent":["module.exports = function(config){\r\n    \r\n    \"use strict\";\r\n    \r\n    var extend = require('extend');\r\n    config = extend ( require('./config.default'), config);\r\n    var type = require(\"./type\")(config);\r\n    var predicate = require(\"./predicate\")(config);\r\n    var cypher = require(\"./cypher\")(config);\r\n    var changeCase = require(\"change-case\");\r\n\r\n    var _=require(\"lodash\");\r\n\r\nvar that = {\r\n\r\nlist:{\r\n    \r\n\r\n    //Alternatively i could query the actual labels and merge them into a distinct array\r\n    distinct: function (labels) {\r\n      \r\n        var q;\r\n        \r\n        if (labels) {\r\n            q = \"match (n:\" + labels.join(':') + \") return distinct(LABELS(n))\";\r\n        }\r\n        else {\r\n            q = req.body.q;\r\n        }\r\n        return cypher.executeQuery(q).then(function (data) {\r\n            \r\n            var output = [];\r\n            \r\n            for (var i = 0; i < data.length; i++) {\r\n                var val = data[i];\r\n                for (var j = 0; j < val.row[0].length; j++) {\r\n                    var label = val.row[0][j];\r\n                    if (output.indexOf(label) === -1) {\r\n                        output.push(label);\r\n                    }\r\n                }\r\n            }\r\n            return output;\r\n        });\r\n\r\n    }\r\n\r\n    ,\r\n    //if the node has any values in its labels array that match picture or person types\r\n    //the corresponding parent label is added to the array\r\n    //The array is uniqued before returning\r\n    parents: function (labels) {\r\n        var out = [];\r\n        if (labels && labels.length)\r\n        {\r\n            if (_.intersection(labels,type.pictureTypes).length) {\r\n                out.push(\"Picture\");\r\n            }\r\n            if (_.intersection(labels,type.personTypes).length) {\r\n                out.push(\"Person\");\r\n            }\r\n        }\r\n        return labels;\r\n    }\r\n}\r\n    ,\r\n    addParents:function(n){\r\n        n.labels = _.uniq(n.labels.concat(that.list.parents(n.labels)));\r\n        return n;\r\n    }\r\n    \r\n          //update labelled\r\n                //can only do this if < 50 items labelled or request gets too large\r\n                /*\r\n                \r\n                   if (n.labelled && !n.temp.labelledOverflow) {\r\n                    var arrLabelled = n.labelled.map(function (i) { return i.id; });\r\n                    var arrExistingLabelled = existing.labelled.map(function (i) { return i.id; });\r\n                    arrLabelledToRemove = _.difference(arrExistingLabelled,arrLabelled);\r\n                    arrLabelledToAdd = _.difference(arrLabelled,arrExistingLabelled);\r\n                    if (arrLabelledToAdd.length) {\r\n                        statements.push({ statement: \"match(n:Label) where ID(n) in [\" + arrLabelledToAdd.join(\",\") + \"] set n:\" + props.label });\r\n                    }\r\n                    if (arrLabelledToRemove.length) {\r\n                        statements.push({ statement: \"match(n:Label) where ID(n) in [\" + arrLabelledToRemove.join(\",\") + \"] remove n:\" + props.label });\r\n                    }\r\n                }\r\n                */\r\n             \r\n\r\n};\r\n\r\n\r\nreturn that;\r\n\r\n\r\n    \r\n    \r\n};\r\n\r\n"]}