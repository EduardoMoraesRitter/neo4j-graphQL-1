{"version":3,"sources":["../../src/api/node.metadata.js"],"names":[],"mappings":";;AAAC,OAAO,OAAP,GAAiB,UAAS,MAAT,EAAgB;;AAE9B,iBAF8B;;AAI9B,QAAI,SAAS,QAAQ,QAAR,CAAT,CAJ0B;AAK9B,aAAS,OAAS,QAAQ,kBAAR,CAAT,EAAsC,MAAtC,CAAT,CAL8B;AAM9B,QAAI,SAAS,QAAQ,UAAR,EAAoB,MAApB,CAAT,CAN0B;;AASlC,QAAI,OAAO;;;;AAIP,0BAAkB,0BAAU,CAAV,EAClB;AACI,gBAAI,CAAC,EAAE,YAAF,EAAe;AAChB,sBAAM,2BAAN,CADgB;aAApB;AAGA,gBAAI,CAAC,EAAE,EAAF,EAAK;AACN,sBAAM,gBAAN,CADM;aAAV;;AAIA,gBAAI,aAAa,EAAb,CARR;AASI,uBAAW,IAAX,CAAgB,OAAO,cAAP,CAAsB,0BAA0B,EAAE,EAAF,GAAO,sCAAjC,EAAyE,KAA/F,EAAsG,EAAE,QAAQ,EAAE,YAAF,EAAhH,CAAhB,EATJ;AAUI,mBAAO,OAAO,iBAAP,CAAyB,UAAzB,EACF,IADE,CACG,UAAU,OAAV,EAAmB;AACrB,uBAAO,QAAQ,CAAR,EAAW,IAAX,CAAgB,CAAhB,EAAmB,GAAnB,CAAuB,CAAvB,CAAP,CADqB;aAAnB,CADV,CAVJ;SADkB;;AAiBlB,sBAAc,sBAAU,CAAV;AACd;;;;;;;;;;;;;;;;;;AAkBI,gBAAI,aAAa,EAAb,CAlBR;;AAoBI,gBAAI,IAAI,EAAE,QAAF,GAAa,qCAAb,GAAqD,0CAArD;;AApBZ,gBAsBQ,EAAE,IAAF,EAAQ;;AAER,qBAAK,yBAAL,CAFQ;;AAIR,oBAAI,EAAE,KAAF,EAAS;AACT,yBAAK,kBAAL,CADS;iBAAb;AAGA,oBAAI,EAAE,IAAF,EAAQ;AACR,yBAAK,gBAAL,CADQ;iBAAZ;AAGA,oBAAI,EAAE,IAAF,EAAQ;AACR,yBAAK,kBAAL,CADQ;iBAAZ;AAGA,oBAAI,EAAE,UAAF,EAAc;AACd,yBAAK,4BAAL,CADc;iBAAlB;AAGA,oBAAI,EAAE,UAAF,EAAc;AACd,yBAAK,4BAAL,CADc;iBAAlB;AAGA,oBAAI,EAAE,QAAF,EAAY;AACZ,yBAAK,wBAAL,CADY;iBAAhB;;AAIA,qBAAK,qBAAL,CAvBQ;AAwBR,oBAAI,IAAI,OAAO,cAAP,CAAsB,CAAtB,EAAyB,KAAzB,EAAgC,CAAhC,CAAJ,CAxBI;AAyBR,2BAAW,IAAX,CAAgB,CAAhB,EAzBQ;aAAZ,MA4BK;;AAED,qBAAK,eAAL,CAFC;aA5BL;;AAkCA,gBAAI,IAAI,OAAO,cAAP,CAAsB,CAAtB,EAAyB,KAAzB,EAAgC,CAAhC,CAAJ,CAxDR;AAyDI,uBAAW,IAAX,CAAgB,CAAhB,EAzDJ;;AA2DI,mBAAO,OAAO,iBAAP,CAAyB,UAAzB,CAAP;;;;;;SA5DU;AACd;AAsEA,mBAAW,mBAAU,CAAV;AACX;AACI,gBAAI,aAAa,EAAb,CADR;AAEI,gBAAI,QAAQ,UAAU,YAAV,CAAuB,CAAvB,CAAR,CAFR;AAGI,uBAAW,IAAX,CAAgB,OAAO,cAAP,CAAsB,0BAA0B,EAAE,EAAF,GAAO,+BAAjC,EAAkE,KAAxF,EAA+F,EAAE,SAAS,KAAT,EAAjG,CAAhB,EAHJ;AAII,mBAAO,OAAO,iBAAP,CAAyB,UAAzB,EAAqC,IAArC,CAA0C,UAAU,OAAV,EAAmB;AAChE,uBAAO,QAAQ,CAAR,EAAW,IAAX,CAAgB,CAAhB,EAAmB,GAAnB,CAAuB,CAAvB,CAAP,CADgE;aAAnB,CAAjD,CAJJ;SADW;;KA5FX,CAT8B;;AAkHlC,WAAO,IAAP,CAlHkC;CAAhB","file":"node.metadata.js","sourcesContent":["ï»¿module.exports = function(config){\r\n    \r\n    \"use strict\";\r\n    \r\n    var extend = require('extend');\r\n    config = extend ( require('./config.default'), config);\r\n    var cypher = require(\"./cypher\")(config);\r\n\r\n\r\nvar that = {\r\n\r\n    //n.id = node id\r\n    //n.wikipagename (nb was just name)\r\n    saveWikipagename: function (n)\r\n    {\r\n        if (!n.wikipagename){\r\n            throw \"wikipagename not supplied\";\r\n        }\r\n        if (!n.id){\r\n            throw \"no id supplied\";\r\n        }\r\n        \r\n        var statements = [];\r\n        statements.push(cypher.buildStatement(\"match(n) where ID(n)=\" + n.id + \"  set n.Wikipagename={page} return n\", \"row\", { \"page\": n.wikipagename }));\r\n        return cypher.executeStatements(statements)\r\n            .then(function (results) {\r\n                return results[0].data[0].row[0];\r\n            });\r\n    }\r\n    ,\r\n    saveMetadata: function (d) //for saving metadata from a scrape\r\n    {\r\n        \r\n        //        d = {\r\n        //            imageUrl: imgurl,\r\n        //            title: clean(metadatabits[0].replace(\"<b>\", \"\").replace(\"</b>\", \"\")),\r\n        //            date: clean(metadatabits[1]),\r\n        //            type: clean(metadatabits[2].split(\",\")[0]),\r\n        //            dimensions: clean(metadatabits[2].split(\",\")[1]),\r\n        //            collection: clean(metadatabits[3]),\r\n        //            text: $($tr.find('td')[1]).text().replace(/\\r?\\n|\\r/, \"\"),//get rid of first linebreak only\r\n        //            page: itempageurl\r\n        //        }\r\n        //        or\r\n        //      d = {\r\n        //        imageUrl: imgurl,\r\n        //        text: $($tr.find('td')[1]).text().replace(/\\r?\\n|\\r/, \"\"),//get rid of first linebreak only\r\n        //page: itempageurl\r\n        //      }\r\n        var statements = [];\r\n        \r\n        var q = d.imageUrl ? \"match(n:Wga {ImageUrl:{imageUrl}}) \" : \"match(n:Olga {ImageCache:{imageCache}}) \";//NB POOR ASSUMPTION !\r\n        \r\n        if (d.page) {\r\n            \r\n            q += \" set  n.ImageRef={page}\";\r\n            \r\n            if (d.title) {\r\n                q += \",n.Title={title}\";\r\n            }\r\n            if (d.date) {\r\n                q += \",n.Date={date}\";\r\n            }\r\n            if (d.type) {\r\n                q += \",n.Medium={type}\";\r\n            }\r\n            if (d.dimensions) {\r\n                q += \",n.Dimensions={dimensions}\";\r\n            }\r\n            if (d.collection) {\r\n                q += \",n.Collection={collection}\";\r\n            }\r\n            if (d.metadata) {\r\n                q += \",n.Metadata={metadata}\";\r\n            }\r\n            \r\n            q += \"  return n.ImageRef\";\r\n            let s = cypher.buildStatement(q, \"row\", d);\r\n            statements.push(s);\r\n\r\n        }\r\n        else {\r\n            \r\n            q += \" set  n:NoRef\";\r\n\r\n        }\r\n        \r\n        let s = cypher.buildStatement(q, \"row\", d);\r\n        statements.push(s);\r\n        \r\n        return cypher.executeStatements(statements);\r\n            //.then(function (results) {\r\n\r\n            //    return results[0].data[0].row[0];\r\n\r\n            //});\r\n\r\n\r\n\r\n    }\r\n    ,\r\n    saveProps: function (n)//short version for freebase prop saving\r\n    {\r\n        var statements = [];\r\n        var props = nodeUtils.propsForSave(n);\r\n        statements.push(cypher.buildStatement(\"match(n) where ID(n)=\" + n.id + \"  set n= {props} return ID(n)\", \"row\", { \"props\": props }));\r\n        return cypher.executeStatements(statements).then(function (results) {\r\n            return results[0].data[0].row[0];\r\n        });\r\n    }\r\n\r\n};\r\n\r\n\r\nreturn that;\r\n  \r\n};\r\n\r\n"]}