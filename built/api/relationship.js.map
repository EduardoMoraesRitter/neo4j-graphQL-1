{"version":3,"sources":["../../src/api/relationship.js"],"names":[],"mappings":"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","file":"relationship.js","sourcesContent":["module.exports = function(config){\r\n    \r\n    \"use strict\";\r\n    \r\n   \r\n    var _=require(\"lodash\");\r\n    config = _.extend(require('./config.default'), config);\r\n    var type = require(\"./type\")(config);\r\n    var predicate = require(\"./predicate\")(config);\r\n    var cypher = require(\"./cypher\")(config);\r\n    var image = require(\"./image\")(config);\r\n    var utils = require(\"./utils\")(config);\r\n    var changeCase = require(\"change-case\");\r\n\r\n\r\n    \r\n    \r\n     //Returns picture comparisons for 2 nodes \r\n     //(id1,id2) on 'BY'\r\n    function getVisualComparisons(id1,id2,options) { \r\n\r\n        var parsed1 = utils.getMatch(id1,\"n\");\r\n        var parsed2 =  utils.getMatch(id2,\"m\");\r\n        var q = parsed1 + \" with n \" + parsed2;\r\n        \r\n        q += \" with n,m match (n) <- [:BY] - (c1:Picture) - [r] - (c2:Picture) - [:BY] -> (m)\";\r\n        q += \" with c1,c2,r match c1 - [:IMAGE] - (i1:Main:Image) \";\r\n        q += \" with c1,c2,i1,r match c2 - [:IMAGE] - (i2:Main:Image) \";\r\n        q += \" return c1,ID(c1),labels(c1),i1,c2,ID(c2),labels(c2),i2,type(r) limit 50\";\r\n        \r\n        return cypher.executeQuery(q).then(function (data) {\r\n            \r\n            var out = data.map(function (val) {\r\n                \r\n                var item = {};\r\n                \r\n                var props = {\r\n                    from: utils.camelCase(val.row[4]),\r\n                    to: utils.camelCase(val.row[0])\r\n                    };\r\n                    \r\n                if (options.format===\"compact\"){\r\n                    item.from = {title:props.from.title};\r\n                    item.to = {title:props.to.title} ;\r\n                    item.predicate = predicate.get(val.row[8]).toString();\r\n                }\r\n                else{\r\n                    item.from = _.extend(props.from,{\r\n                            id:val.row[1],\r\n                            labels: val.row[2]\r\n                    });\r\n                    item.to = _.extend(props.to,{\r\n                            id:val.row[5],\r\n                            labels: val.row[6]\r\n                    });\r\n                    item.predicate = predicate.get(val.row[8]);\r\n                }\r\n                \r\n                item.from.image = image.configure(val.row[3],options);\r\n                item.to.image = image.configure(val.row[7],options);\r\n\r\n                return item;\r\n\r\n            });\r\n            \r\n            return out;\r\n        });\r\n    }\r\n    \r\n    //Builds a relationships object from the following data structure:\r\n    // target,ID(target),ID(rel),TYPE(rel)\r\n    //,image,ID(image)\r\n    //(image is optional)\r\n    //the predicate.toString() forms the object key\r\n    //size refers to the size of the output, can be compact or undefined\r\n    var build = function(rels,direction,options){\r\n        \r\n        var defaultOptions = {format:\"default\"};\r\n        options = _.extend(defaultOptions,options);\r\n        \r\n        var p,key,item,relationships={},itemKeys={};\r\n        \r\n         for (var i = 0; i < rels.length; i++) {\r\n                    \r\n            p = predicate.get(rels[i].row[3]);//TYPE(rel)\r\n            if (direction){\r\n                p.setDirection(direction);\r\n            }\r\n            key = p.toString();\r\n            if (options.format===\"verbose\"){\r\n                //return the full item\r\n                 item = utils.camelCase(rels[i].row[0]);\r\n            }\r\n            else{\r\n                 item = {\r\n                    label: rels[i].row[0].Label,\r\n                    type: rels[i].row[0].Type\r\n                };\r\n              \r\n            }\r\n           \r\n            item.id=rels[i].row[1];\r\n            \r\n            //add image for picture if present\r\n            if (rels[i].row[4]){\r\n                item.image= image.configure(rels[i].row[4],options);\r\n                item.image.id = rels[i].row[5];\r\n            }\r\n            \r\n            let compact = item.image ? item.image.thumb : (item.label || item.id);\r\n            \r\n            if (!relationships[key]) {\r\n                \r\n                   if (options.format===\"compact\"){\r\n         \r\n                       relationships[key] = [compact];\r\n                   }\r\n                   else{\r\n                           relationships[key] = {\r\n                            predicate: p, \r\n                            items: [item]\r\n                        };\r\n                   }\r\n            \r\n                itemKeys[key] = [item.id];\r\n            }\r\n            else {\r\n                //add if not present\r\n                if (itemKeys[key].indexOf(item.id) === -1){\r\n                    if (options.format===\"compact\"){\r\n                            relationships[key].push(compact);\r\n                    }\r\n                    else{\r\n                            relationships[key].items.push(item);\r\n                    }\r\n                    itemKeys[key].push(item.id);\r\n                }\r\n            }\r\n        }\r\n\r\n       // return relationships;\r\n        \r\n        \r\n        //convert to array\r\n        var arr = [];\r\n        for (key in relationships){\r\n            let r = relationships[key];\r\n            r.key=key;\r\n            arr.push(r);\r\n        }\r\n        return arr;\r\n        \r\n        \r\n        \r\n    };\r\n    \r\n    //options\r\n    //format=compact\r\n    var relationships = function(statements,options)\r\n    {\r\n        return cypher.executeStatements(statements).then(function (results) {\r\n\r\n                var inbound,outbound = build(results[0].data,\"out\",options);\r\n                if (results.length > 1 && results[1].data && results[1].data.length){\r\n                    inbound = build(results[1].data,\"in\",options);\r\n                }\r\n                var relationships = _.extend(outbound,inbound);\r\n                return relationships;\r\n            });\r\n    };\r\n\r\nvar that = {\r\n    get:function(n){\r\n        \r\n    }\r\n    ,\r\n     //saves edge to neo (update/create)\r\n    //TODO: according to certain rules labels will need to be maintained when relationships are created. (update not required as we always delete and recreate when changing start/end nodes)\r\n    //tag a with label b where:\r\n    // a=person and b=provenance (eg painter from france)\r\n    // a=person and n=group, period (eg painter part of les fauves / roccocco)\r\n    // a=picture and b=non-person (eg picture by corot / of tree) - although typically this will be managed through labels directly (which will then in turn has to keep relationships up to date)\r\n    save: function (edge) {//startNode and endNode provide the full node objects for the edge\r\n        \r\n        //remove any empty properties\r\n        for (var p in edge) {\r\n            if (edge[p] === null || edge[p] === undefined || edge[p] === \"\") {\r\n                delete edge[p];\r\n            }\r\n        }\r\n\r\n        if (edge.id) //update\r\n        {\r\n            that.update(edge);\r\n        }\r\n        else //new\r\n        {\r\n            that.insert(edge);\r\n        }\r\n    }\r\n    ,\r\n    update:function(edge){\r\n      \r\n        let statements = [];\r\n        statements.push(cypher.buildStatement(\"match (a)-[r]->(b) where ID(a) = \" + edge.start.id + \" and ID(b)=\" + edge.end.id + \" and ID(r)=\" + edge.id + \" delete r\"));\r\n        statements.push(cypher.buildStatement(\"match(a),(b) where ID(a)=\" + edge.start.id + \" and ID(b) = \" + edge.end.id + \" create (a)-[r:\" + edge.type + \" {props}]->(b) return r\"\r\n                                , \"graph\"\r\n                                , { \"props\": edge.properties }));\r\n\r\n        return cypher.executeStatements(statements)\r\n                .then(function (results) {\r\n            return graph.build(results[0].data);\r\n        });\r\n    }\r\n    ,\r\n    insert:function(edge){\r\n      \r\n        var aIsPerson = edge.start.labels.indexOf(\"Person\") > -1;\r\n        var bIsProvenance = edge.end.labels.indexOf(\"Provenance\") > -1;\r\n        var bIsGroup = edge.end.labels.indexOf(\"Group\") > -1;\r\n        var bIsPeriod = edge.end.labels.indexOf(\"Period\") > -1;\r\n        \r\n        var tagAwithB = ((aIsPerson && (bIsProvenance || bIsGroup || bIsPeriod)) && edge.type != \"INFLUENCES\") || edge.type === \"TYPE_OF\";\r\n        \r\n        let statements = [];\r\n        \r\n        if (tagAwithB) {\r\n            statements.push(cypher.buildStatement(\"match(a) where ID(a)=\" + edge.start.id + \" set a:\" + edge.end.Lookup));\r\n        }\r\n        \r\n        statements.push(cypher.buildStatement(\"match(a),(b) where ID(a)=\" + edge.start.id + \" and ID(b) = \" + edge.end.id + \" create (a)-[r:\" + edge.type + \" {props}]->(b) return r\"\r\n                , \"graph\"\r\n                , { \"props\": edge.properties }));\r\n            \r\n        return cypher.executeStatements(statements)\r\n                .then(function (results) {\r\n                    var out = graph.build(results[statements.length - 1].data);\r\n                    return out;\r\n        });\r\n            \r\n    }\r\n    ,\r\n    delete: function (edge) {\r\n\r\n        if (edge && edge.id) {\r\n            \r\n            var statements = [];\r\n            \r\n            //remove label that may be in place due to relationship\r\n            statements.push(cypher.buildStatement(\"match (a) where ID(a) = \" + edge.start.id + \" remove a:\" + edge.end.label));\r\n            statements.push(cypher.buildStatement(\"match (a)-[r]->(b) where ID(r)=\" + edge.id + \" delete r\"));\r\n            return cypher.executeStatements(statements);\r\n\r\n        }\r\n\r\n    }\r\n    ,\r\ncreateStatement(n,predicate,e){\r\n    \r\n    if (e.id===undefined || e.id < 0)\r\n    {\r\n        throw (\"Cannot create relationship with item that has no id\");\r\n    }\r\n     if (n.id===undefined || e.id < 0)\r\n    {\r\n        throw (\"Cannot create relationship for item without id\");\r\n    }\r\n        \r\n    var relType = predicate.lookup.toUpperCase();\r\n    var q;\r\n    if (predicate.direction === \"out\") {\r\n        q = \"match n,m where ID(n)=\" + n.id + \" and ID(m)=\" + e.id;\r\n        q += \"  create (n) - [:\" + relType + \"] -> (m)\";\r\n    }\r\n    else if (predicate.direction === \"in\")  {\r\n        q = \"match n,m where ID(n)=\" + n.id + \" and ID(m)=\" + e.id;\r\n        q += \"  create (n) <- [:\" + relType + \"] - (m)\";\r\n    }\r\n    else{\r\n        throw(\"Invalid predicate direction: \" + predicate.direction);\r\n    }\r\n    return cypher.buildStatement(q);\r\n}\r\n              ,\r\n removeStatement:function(n,predicate,e){\r\n    var relType = predicate.lookup.toUpperCase();\r\n    var q;\r\n    if (predicate.direction === \"out\") {\r\n        q = \"match (n) - [r:\" + relType + \"] -> (m)\";\r\n        q += \" where ID(n)=\" + n.id + \" and ID(m)=\" + e.id + \"  delete r\";\r\n    }\r\n    else if (predicate.direction === \"in\")  {\r\n        q = \"match (n) <- [r:\" + relType + \"] - (m)\";\r\n        q += \" where ID(n)=\" + n.id + \" and ID(m)=\" + e.id + \"  delete r\";\r\n    }\r\n    else{\r\n        throw(\"Invalid predicate direction: \" + predicate.direction);\r\n    }\r\n     return cypher.buildStatement(q);\r\n}\r\n,\r\n//returns an array of relationship differences between the passed in node \r\n//and its saved version\r\n//each item in the array is formed\r\n//{\r\n//  \"predicate\":{\"lookup\":\"LIKES\",direction:\"out\"}\r\n//  ,add:[{id:123},{id:456}],remove:[{id:789},{id:543}]}\r\n//}\r\ndifference:function(n){\r\n    \r\n    return that.list.conceptual(n).then(function(existingRelationships){\r\n        \r\n        var diff = [];\r\n        \r\n        for (let key in n.relationships) {\r\n            //key is the predicate.toString() which includes direction (influenced / influenced by)\r\n            let newRel = n.relationships[key];\r\n            if (!_.isArray(newRel.items)){ \r\n                throw(\"Relationship items must be an array\");\r\n            }\r\n            \r\n            let existingRel = existingRelationships ? existingRelationships[key]:null;\r\n            if (!existingRel) {\r\n                let changed = {predicate:newRel.predicate,add:newRel.items,remove:[]};\r\n                diff.push(changed);\r\n            }\r\n            else {\r\n                 let itemsToRemove=utils.difference(existingRel.items,newRel.items);\r\n                 let itemsToAdd=utils.difference(newRel.items,existingRel.items);\r\n                  if (itemsToAdd.length || itemsToRemove.length){\r\n                    let changed = {predicate:newRel.predicate,add:itemsToAdd,remove:itemsToRemove};\r\n                    diff.push(changed);\r\n                }\r\n            }\r\n        }\r\n        \r\n        for (let key in existingRelationships) {\r\n            let newRel = n.relationships ? n.relationships[key]:null;\r\n            let existingRel = existingRelationships[key];\r\n            if (!newRel) {     //relationship not present in node so remove it from DB\r\n                let changed = {predicate:existingRel.predicate,remove:existingRel.items,add:[]};\r\n                diff.push(changed);\r\n            }\r\n        }\r\n        \r\n        return diff;\r\n\r\n    });\r\n}\r\n    ,\r\n    saveLinks:function(){\r\n        \r\n        \r\n\r\n                /*\r\n                //insert links\r\n                if (n.temp && n.temp.links){\r\n                    for (let i = 0; i < n.temp.links.length; i++) {\r\n                        let e = n.temp.links[i];\r\n                        if (e.editing) {\r\n                            delete e.editing;\r\n                        }\r\n                        e.Type = \"Link\";\r\n                        statements.push(cypher.buildStatement(\"create (l:Link {props}) with l MATCH (n) where ID(n)=\" + n.id + \" create (n) - [r:LINK] -> (l) \", \"row\", { props: utils.pascalCase(e) }));\r\n                    }\r\n                }\r\n                \r\n                \r\n                \r\n                \r\n                     //update links (???)\r\n                        if (n.temp && n.temp.links){\r\n                             statements.push(cypher.buildStatement(\"MATCH (n)- [r:LINK] -> (l:Link) where ID(n)=\" + n.id + \"  delete r,l \", \"row\"));\r\n                        for (let i = 0; i < n.temp.links.length; i++) {\r\n                            let e = n.temp.links[i];\r\n                            if (e.editing) {\r\n                                delete e.editing;\r\n                            }\r\n                            e.Type = \"Link\";\r\n                            statements.push(cypher.buildStatement(\"create (l:Link:\" + n.Label  + \"  {props}) with l MATCH (n) where ID(n)=\" + n.id + \" create (n) - [r:LINK] -> (l) \", \"row\", { props: e }));\r\n                        }\r\n                    \r\n                        }\r\n                */\r\n    }\r\n    ,\r\n    list:{\r\n        //web links\r\n        web:function(id){\r\n        var q = utils.getMatch(id) + \"  with n match (n) - [r:LINK] - (m:Link)     return ID(m), m.Name,m.Url\";\r\n        return cypher.executeQuery(q).then(function(links){\r\n            var weblinks = [];\r\n                for (i = 0; i < links.length; i++) {\r\n                    weblinks.links.push({\r\n                        name: links[i].row[1], \r\n                        url: links[i].row[2]\r\n                    });\r\n                }\r\n            return weblinks;\r\n        });\r\n        }\r\n        ,\r\n        //All relationships\r\n        //NB will return all pictures by an artist or in a category \r\n        //Used by picture.getwithrels\r\n        all:function(id,options){\r\n            var match = utils.getMatch(id);\r\n            var statements = [];\r\n            //out \r\n            statements.push(cypher.buildStatement(match + \" with n match (n) - [r] -> (m)  return m,ID(m), ID(r),TYPE(r)\", \"row\"));\r\n            //in\r\n            statements.push(cypher.buildStatement(match + \" with n match (n) <- [r] - (m)  return n,ID(m),ID(r),TYPE(r)\", \"row\"));\r\n            return relationships(statements,options);\r\n        }\r\n        ,\r\n        //Relationships with 'Label' (non picture) nodes\r\n        //Aggregated by [predicate + direction ('->' or '-<')] which form the object keys\r\n        //options.format is compact,default\r\n        conceptual: function (id,options) {\r\n\r\n            var match = utils.getMatch(id);\r\n            var statements = [];\r\n            //out \r\n            statements.push(cypher.buildStatement(match + \" with n match (n) - [r] -> (m:Label)  return m,ID(m),ID(r),TYPE(r)\", \"row\"));\r\n            //in\r\n            statements.push(cypher.buildStatement(match + \" with n match (n) <- [r] - (m:Label)  where  NOT(n <-[:BY]-(m))    return m,ID(m),ID(r),TYPE(r)\", \"row\"));\r\n            return relationships(statements,options);\r\n    }\r\n       ,\r\n        //Relationships with 'Property'  nodes\r\n       //format is default\r\n        property: function (id) {\r\n\r\n            var match = utils.getMatch(id);\r\n            var statements = [];\r\n            //out only\r\n            statements.push(cypher.buildStatement(match + \" with n match (n) - [r:PROPERTY] -> (m:Property)  return m,ID(m),ID(r),TYPE(r)\", \"row\"));\r\n            return relationships(statements,{format:\"verbose\"});\r\n    }\r\n        ,\r\n        //Relationships with 'Picture' nodes\r\n        //Can be used \r\n        //-- to get pictures related to an conceptual entity (eg paintings by an artist)\r\n        //-- to get pictures related to a picture\r\n        //-- if 2 ids are passed\r\n        //------picture comparisons between the 2 nodes are returned\r\n        visual:function(id1,id2,options){\r\n            \r\n            if (id1 && id2){\r\n                return getVisualComparisons(id1,id2,options);\r\n            }\r\n            else{\r\n                var match = utils.getMatch(id1);\r\n                var statements = [];\r\n                //out \r\n                statements.push(cypher.buildStatement(match + \" with n match (n) - [r] -> (m:Picture) - [:IMAGE] -> (i:Image:Main)  return m,ID(m),ID(r),TYPE(r),i,ID(i),LABELS(i)\", \"row\"));\r\n                //in\r\n                statements.push(cypher.buildStatement(match + \" with n match (n) <- [r] - (m:Picture)- [:IMAGE] -> (i:Image:Main)  return m,ID(m), ID(r),TYPE(r),i,ID(i),LABELS(i)\", \"row\"));\r\n                return relationships(statements,options);\r\n            }\r\n           \r\n        }\r\n        ,\r\n        // relationships with creators\r\n        // inferred from relationships between their creations\r\n        // they may or may not have an explicit relationship defined\r\n        inferred:function(id,options){\r\n            var q = utils.getMatch(id);\r\n\r\n            q += \" with n match (n) <- [:BY] - (c1:Picture) - [] - (c2:Picture) - [:BY] -> (m)\";\r\n            q += \" return m,ID(m),-1,'inferred',m.Label\";\r\n            \r\n            return cypher.executeQuery(q).then(function(data){\r\n                return build(data,options);\r\n            });\r\n        }\r\n   \r\n     \r\n    }\r\n\r\n};\r\n\r\n\r\nreturn that;\r\n\r\n\r\n    \r\n    \r\n};\r\n\r\n"]}