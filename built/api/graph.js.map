{"version":3,"sources":["../../src/api/graph.js"],"names":[],"mappings":";;AAAA,OAAO,OAAP,GAAiB,UAAS,MAAT,EAAgB;;AAE7B,iBAF6B;;AAI7B,QAAI,SAAS,QAAQ,QAAR,CAAT,CAJyB;AAK7B,aAAS,OAAQ,QAAQ,kBAAR,CAAR,EAAqC,MAArC,CAAT,CAL6B;AAM7B,QAAI,SAAS,QAAQ,UAAR,EAAoB,MAApB,CAAT,CANyB;AAO7B,QAAI,QAAQ,QAAQ,SAAR,EAAmB,MAAnB,CAAR,CAPyB;AAQ5B,QAAI,QAAQ,QAAQ,SAAR,EAAmB,MAAnB,CAAR,CARwB;;AAUjC,QAAI,OAAO;;;;;;;AAOP,aAAI,aAAU,CAAV,EAAa,WAAb,EAA0B;;AAE1B,mBAAO,OAAO,YAAP,CAAoB,CAApB,EAAuB,OAAvB,EAAgC,IAAhC,CAAqC,UAAU,IAAV,EAAgB;AACxD,uBAAO,KAAK,KAAL,CAAW,IAAX,EAAiB,WAAjB,CAAP,CADwD;aAAhB,CAA5C,CAF0B;SAA1B;;;;AAUJ,0BAAkB,0BAAU,EAAV,EAAc;;AAE5B,gBAAI,IAAI,0CAA0C,EAA1C,GAA+C,WAA/C,CAFoB;AAG5B,mBAAO,KAAK,GAAL,CAAS,CAAT,CAAP,CAH4B;SAAd;;AAMlB,eAAQ,eAAU,IAAV,EAAgB,WAAhB,EAA6B;;AAEjC,gBAAI,QAAQ,EAAR,CAF6B;AAGjC,gBAAI,QAAQ,EAAR,CAH6B;AAIjC,gBAAI,YAAY,EAAZ,CAJ6B;AAKjC,gBAAI,YAAY,EAAZ,CAL6B;;AAOjC,iBAAK,IAAI,IAAI,CAAJ,EAAO,IAAI,KAAK,MAAL,EAAa,GAAjC,EAAsC;;AAElC,oBAAI,MAAM,KAAK,CAAL,CAAN,CAF8B;;AAIlC,qBAAK,IAAI,OAAO,CAAP,EAAU,OAAO,IAAI,KAAJ,CAAU,aAAV,CAAwB,MAAxB,EAAgC,MAA1D,EAAkE;AAC9D,wBAAI,MAAM,IAAI,KAAJ,CAAU,aAAV,CAAwB,IAAxB,CAAN,CAD0D;AAE9D,0BAAM,IAAI,EAAJ,CAAN,GAAgB,GAAhB,CAF8D;AAG9D,8BAAU,IAAV,CAAe,GAAf,EAH8D;iBAAlE;;AAMA,qBAAK,IAAI,QAAQ,CAAR,EAAW,QAAQ,IAAI,KAAJ,CAAU,KAAV,CAAgB,MAAhB,EAAwB,OAApD,EAA6D;AACzD,wBAAI,OAAO,IAAI,KAAJ,CAAU,KAAV,CAAgB,KAAhB,CAAP,CADqD;AAEzD,wBAAI,IAAI,MAAM,SAAN,CAAgB,KAAK,UAAL,CAApB,CAFqD;AAGzD,sBAAE,MAAF,GAAW,KAAK,MAAL,CAH8C;AAIzD,sBAAE,EAAF,GAAO,KAAK,EAAL,CAJkD;AAKzD,0BAAM,SAAN,CAAgB,EAAE,KAAF,CAAhB,CALyD;AAMzD,0BAAM,KAAK,EAAL,CAAN,GAAiB,CAAjB,CANyD;AAOzD,8BAAU,IAAV,CAAe,CAAf,EAPyD;iBAA7D;aAVJ;;AAsBA,gBAAI,WAAJ,EAAiB;AACb,uBAAO,EAAE,OAAO,SAAP,EAAkB,OAAO,SAAP,EAA3B,CADa;aAAjB,MAGK;AACD,uBAAO,EAAE,OAAO,KAAP,EAAc,OAAO,KAAP,EAAvB,CADC;aAHL;SA7BI;;KAvBR,CAV6B;;AA4EjC,WAAO,IAAP,CA5EiC;CAAhB","file":"graph.js","sourcesContent":["module.exports = function(config){\r\n    \r\n    \"use strict\";\r\n    \r\n    var extend = require('extend');\r\n    config = extend (require('./config.default'), config);\r\n    var cypher = require(\"./cypher\")(config);\r\n    var utils = require(\"./utils\")(config);\r\n     var image = require(\"./image\")(config);\r\n\r\nvar that = {\r\n    //returns graph data object for given query(q), with properties nodes, edges containing neo node/edge data by property=id\r\n    //node structure is {id:1,labels:[],properties:{}}\r\n    //edge structure is \r\n    //post\r\n    //q = graph query\r\n    //NB THIS IS A DANGEROUS ONE AS IT WOULD ALLOW ANY QUERY TO BE EXECUTED AGAINST THE GRAPH\r\n    get:function (q, returnArray) {\r\n        \r\n        return cypher.executeQuery(q, \"graph\").then(function (data) {\r\n            return that.build(data, returnArray);\r\n        });\r\n\r\n    }\r\n    ,\r\n    //get all relationships with other :Global nodes\r\n    //by (internal)ID\r\n    getRelationships: function (id) {\r\n\r\n        var q = \"match (n)-[r]-(m:Global) where ID(n)=\" + id + \" return r\";\r\n        return that.get(q);\r\n    }\r\n    ,\r\n    build : function (data, returnArray) {\r\n    \r\n        var edges = {};\r\n        var nodes = {};\r\n        var nodeArray = [];\r\n        var edgeArray = [];\r\n\r\n        for (var i = 0; i < data.length; i++) {\r\n            \r\n            var val = data[i];\r\n            \r\n            for (var relx = 0; relx < val.graph.relationships.length; relx++) {\r\n                var rel = val.graph.relationships[relx];\r\n                edges[rel.id] = rel;\r\n                edgeArray.push(rel);\r\n            }\r\n            \r\n            for (var nodex = 0; nodex < val.graph.nodes.length; nodex++) {\r\n                var node = val.graph.nodes[nodex];\r\n                var n = utils.camelCase(node.properties);\r\n                n.labels = node.labels;\r\n                n.id = node.id;\r\n                image.configure(n.image);\r\n                nodes[node.id] = n;\r\n                nodeArray.push(n);\r\n            }\r\n\r\n        }\r\n\r\n        if (returnArray) {\r\n            return { nodes: nodeArray, edges: edgeArray };\r\n        }\r\n        else {\r\n            return { nodes: nodes, edges: edges };\r\n        }\r\n    }\r\n\r\n\r\n  \r\n\r\n};\r\n\r\n\r\nreturn that;\r\n\r\n\r\n    \r\n    \r\n};\r\n\r\n"]}